{
    "docs": [
        {
            "location": "/",
            "text": "RoStrap\n\u00b6\n\n\nRoStrap is the name of the GitHub organization and resource management system designed to expidite game development on Roblox. It's main goals are to increase code reusability and simplify the networking of resources without penalty for not using features. It allows for easy access and installation of incredibly useful libraries.\n\n\nWith the click of a button you can start using an optimized rewrite of the vanilla Lua \nos.date\n function:\n\n\n\n\nlocal\n \nReplicatedStorage\n \n=\n \ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n)\n\n\nlocal\n \nResources\n \n=\n \nrequire\n(\nReplicatedStorage\n:\nWaitForChild\n(\n\"Resources\"\n))\n\n\nlocal\n \nDate\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Date\"\n)\n\n\n\nprint\n(\nDate\n(\n\"!%c\"\n,\n \ntick\n()))\n \n-- Thu Jan 31 08:55:48 2020\n\n\n\n\n\nOr a beautiful checkbox:\n\n\n\n\nlocal\n \nReplicatedStorage\n \n=\n \ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n)\n\n\nlocal\n \nResources\n \n=\n \nrequire\n(\nReplicatedStorage\n:\nWaitForChild\n(\n\"Resources\"\n))\n\n\nlocal\n \nColors\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Colors\"\n)\n\n\nlocal\n \nSelectionControl\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"SelectionControl\"\n)\n\n\n\nlocal\n \nLocalPlayer\n \n=\n \ngame\n:\nGetService\n(\n\"Players\"\n).\nLocalPlayer\n\n\nlocal\n \nPlayerGui\n \n=\n \nLocalPlayer\n:\nFindFirstChildOfClass\n(\n\"PlayerGui\"\n)\n\n\n\nlocal\n \nScreen\n \n=\n \nInstance\n.\nnew\n(\n\"ScreenGui\"\n,\n \nPlayerGui\n)\n\n\n\nlocal\n \nFrame\n \n=\n \nInstance\n.\nnew\n(\n\"Frame\"\n,\n \nScreen\n)\n\n\nFrame\n.\nBackgroundColor3\n \n=\n \nColors\n.\nGrey\n[\n200\n]\n\n\nFrame\n.\nBorderSizePixel\n \n=\n \n0\n\n\nFrame\n.\nSize\n \n=\n \nUDim2\n.\nnew\n(\n1\n,\n \n0\n,\n \n1\n,\n \n0\n)\n\n\n\nlocal\n \nReceiveUpdates\n \n=\n \nSelectionControl\n.\nnew\n(\n\"Checkbox\"\n)\n\n\nReceiveUpdates\n.\nEnabledColor\n \n=\n \n\"Teal\"\n\n\nReceiveUpdates\n.\nState\n \n=\n \ntrue\n\n\nReceiveUpdates\n.\nAnchorPoint\n \n=\n \nVector2\n.\nnew\n(\n0.5\n,\n \n0.5\n)\n\n\nReceiveUpdates\n.\nPosition\n \n=\n \nUDim2\n.\nnew\n(\n0.5\n,\n \n0\n,\n \n0.5\n,\n \n0\n)\n\n\nReceiveUpdates\n.\nParent\n \n=\n \nFrame\n\n\n\n\n\n\n\nOr manage your RemoteEvents and RemoteFunctions!\n\nlocal\n \nReplicatedStorage\n \n=\n \ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n)\n\n\nlocal\n \nResources\n \n=\n \nrequire\n(\nReplicatedStorage\n:\nWaitForChild\n(\n\"Resources\"\n))\n\n\n\nlocal\n \nChatted\n \n=\n \nResources\n:\nGetRemoteEvent\n(\n\"Chatted\"\n)\n\n\nlocal\n \nClientLoaded\n \n=\n \nResources\n:\nGetRemoteEvent\n(\n\"ClientLoaded\"\n)",
            "title": "Introduction"
        },
        {
            "location": "/#rostrap",
            "text": "RoStrap is the name of the GitHub organization and resource management system designed to expidite game development on Roblox. It's main goals are to increase code reusability and simplify the networking of resources without penalty for not using features. It allows for easy access and installation of incredibly useful libraries.  With the click of a button you can start using an optimized rewrite of the vanilla Lua  os.date  function:   local   ReplicatedStorage   =   game : GetService ( \"ReplicatedStorage\" )  local   Resources   =   require ( ReplicatedStorage : WaitForChild ( \"Resources\" ))  local   Date   =   Resources : LoadLibrary ( \"Date\" )  print ( Date ( \"!%c\" ,   tick ()))   -- Thu Jan 31 08:55:48 2020   Or a beautiful checkbox:   local   ReplicatedStorage   =   game : GetService ( \"ReplicatedStorage\" )  local   Resources   =   require ( ReplicatedStorage : WaitForChild ( \"Resources\" ))  local   Colors   =   Resources : LoadLibrary ( \"Colors\" )  local   SelectionControl   =   Resources : LoadLibrary ( \"SelectionControl\" )  local   LocalPlayer   =   game : GetService ( \"Players\" ). LocalPlayer  local   PlayerGui   =   LocalPlayer : FindFirstChildOfClass ( \"PlayerGui\" )  local   Screen   =   Instance . new ( \"ScreenGui\" ,   PlayerGui )  local   Frame   =   Instance . new ( \"Frame\" ,   Screen )  Frame . BackgroundColor3   =   Colors . Grey [ 200 ]  Frame . BorderSizePixel   =   0  Frame . Size   =   UDim2 . new ( 1 ,   0 ,   1 ,   0 )  local   ReceiveUpdates   =   SelectionControl . new ( \"Checkbox\" )  ReceiveUpdates . EnabledColor   =   \"Teal\"  ReceiveUpdates . State   =   true  ReceiveUpdates . AnchorPoint   =   Vector2 . new ( 0.5 ,   0.5 )  ReceiveUpdates . Position   =   UDim2 . new ( 0.5 ,   0 ,   0.5 ,   0 )  ReceiveUpdates . Parent   =   Frame    Or manage your RemoteEvents and RemoteFunctions! local   ReplicatedStorage   =   game : GetService ( \"ReplicatedStorage\" )  local   Resources   =   require ( ReplicatedStorage : WaitForChild ( \"Resources\" ))  local   Chatted   =   Resources : GetRemoteEvent ( \"Chatted\" )  local   ClientLoaded   =   Resources : GetRemoteEvent ( \"ClientLoaded\" )",
            "title": "RoStrap"
        },
        {
            "location": "/Getting-Started/",
            "text": "Getting Started\n\u00b6\n\n\nTo begin using RoStrap, simply install it:\n\n\n\n\nAfter installing, open a place and enable Http requests from Home \u2192 Game Settings \u2192 Security.\n\n\n\n\nNext, navigate to the \nPLUGINS\n tab. Click the RoStrap logo.\n\n\n\n\nThe plugin will install the \nResources\n library and create an example \"Repository\" folder in \nServerStorage\n from which libraries may be loaded using \nLoadLibrary\n\n\n\n\n\n\nOnly \nFolders\n and libraries should go in this repository.\n\n\nFolder heiarchy of libraries is ignored.\n\n\n\n\n\n\nA \nModuleScript\n and its descendants are considered a single library.\n\n\nThus, only parent \nModuleScripts\n will be accessible via \nLoadLibrary\n\n\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nReplicatedStorage\n \n=\n \ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n)\n\n\nlocal\n \nResources\n \n=\n \nrequire\n(\nReplicatedStorage\n:\nWaitForChild\n(\n\"Resources\"\n))\n\n\n\nlocal\n \nKeys\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Keys\"\n)\n \n-- Keys\n\n\nlocal\n \nThin\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Thin\"\n)\n \n-- Error! Not a valid library",
            "title": "Getting Started"
        },
        {
            "location": "/Getting-Started/#getting-started",
            "text": "To begin using RoStrap, simply install it:   After installing, open a place and enable Http requests from Home \u2192 Game Settings \u2192 Security.   Next, navigate to the  PLUGINS  tab. Click the RoStrap logo.   The plugin will install the  Resources  library and create an example \"Repository\" folder in  ServerStorage  from which libraries may be loaded using  LoadLibrary    Only  Folders  and libraries should go in this repository.  Folder heiarchy of libraries is ignored.    A  ModuleScript  and its descendants are considered a single library.  Thus, only parent  ModuleScripts  will be accessible via  LoadLibrary       Example  local   ReplicatedStorage   =   game : GetService ( \"ReplicatedStorage\" )  local   Resources   =   require ( ReplicatedStorage : WaitForChild ( \"Resources\" ))  local   Keys   =   Resources : LoadLibrary ( \"Keys\" )   -- Keys  local   Thin   =   Resources : LoadLibrary ( \"Thin\" )   -- Error! Not a valid library",
            "title": "Getting Started"
        },
        {
            "location": "/Resources/",
            "text": "Resources\n\u00b6\n\n\nResources\n is the core resource manager and library loader for RoStrap. It is designed to streamline the retrieval and networking of resources.\n\n\nFunctionality\n\u00b6\n\n\nUpon being \nrequired\n on the server for the first time, \nResources\n moves libraries within \nServerStorage.Repository\n to \nReplicatedStorage.Resources.Libraries\n, where both the client and server can \nrequire\n them via the function \nLoadLibrary\n.\n\n\n\n\nLibraries with \"Server\" in their name or in the name of a parent folder (not case-sensitive) are considered server-only libraries, and will not be moved to \nReplicatedStorage\n with the rest of the libraries. Instead, these libraries will be given the tag \nServerLibraries\n and will be moved to folder \nServerStorage.Resources\n. Libraries moved into \nReplicatedStorage\n are tagged with the tag \nReplicatedLibraries\n by the \nplugin\n.\n\n\n\n\nInfo\n\n\nInternally, \nLoadLibrary\n caches and returns \nrequire(Resources:GetLibrary(LibraryName))\n. \nGetLibrary\n is the only function that can \"retrieve\" objects from both \nServerStorage\n and \nReplicatedStorage\n. This is because libraries tagged with either \nReplicatedLibraries\n or \nServerLibraries\n are added directly to its cache.\n\n\n\n\n\n\nNote\n\n\nLibraries will not be moved into \nReplicatedStorage\n in Play-Solo.\n\n\n\n\nAPI\n\u00b6\n\n\nAll methods of \nResources\n have hybrid syntax, meaning they can be called using either a \n:\n or \n.\n\n\nLoadLibrary\n\u00b6\n\n\n\n\nSummary\n\n\nA require-by-string function which internally calls \nrequire(Resources:GetLibrary(string LibraryName))\n and caches the results.\n\n\nVariant\n Resources:LoadLibrary (\n    \nstring\n LibraryName\n)\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nSortedArray\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"SortedArray\"\n)\n\n\n\n-- Some people like to overwrite the default require function\n\n\nlocal\n \nrequire\n \n=\n \nResources\n.\nLoadLibrary\n\n\n\nlocal\n \nSignal\n \n=\n \nrequire\n(\n\"Signal\"\n)\n\n\n\n\n\n\n\n\n\nInfo\n\n\nThis is the only function with a hard-coded name for its cache, so you may access cached require results using the following:\n\n\n-- Resources uses this table to cache LoadLibrary results\n\n\nlocal\n \nLoadedLibraries\n \n=\n \nResources\n:\nGetLocalTable\n(\n\"LoadedLibraries\"\n)\n\n\n\n\n\n\n\nGetLocalTable\n\u00b6\n\n\n\n\nSummary\n\n\nA function which caches a local table by string, and returns said table. Does not replicate. Useful for eliminating the need for \n_G\n or ModuleScripts which return an empty table.\n\n\nTable\n Resources:GetLocalTable (\n    \nstring\n TableName\n)\n\n\n\n\n\n\n\nExample\n\n\n-- Can be used in any script on the same machine to get this table\n\n\nlocal\n \nMyItems\n \n=\n \nResources\n:\nGetLocalTable\n(\n\"MyItems\"\n)\n \n-- {}\n\n\n\n\n\n\n\n\n\nInfo\n\n\nResources uses \nGetLocalTable\n internally, so you can access its internals using this function:\n\n\n-- Resources uses this table to cache LoadLibrary results\n\n\nlocal\n \nLoadedLibraries\n \n=\n \nResources\n:\nGetLocalTable\n(\n\"LoadedLibraries\"\n)\n\n\n\n\n\n\n\nGet functions\n\u00b6\n\n\n\n\nSummary\n\n\nGet functions can be procedurally generated by \nResources\n at run-time in the form of \nResources:GetCLASSNAME(string Name)\n. These functions return an \nInstance\n of \nName\n under \nResources:GetFolder(CLASSNAME:gsub(\"y$\", \"ie\") .. \"s\")\n.\n\n\nRef\n<\nInstance\n> Resources:GetCLASSNAME (\n    \nstring\n InstanceName\n)\n\n\n\n\nThe following is the internal call tree. Keep in mind that these functions cache so the 3\nrd\n function will only run once per machine and \nGetFolder\n will only run once per function generation (e.g. the first time \nGetRemoteEvent\n is called).\n\n\n\n\n\n\n\n\nStep\n\n\nObject to search for\n\n\nFunction call\n\n\n\n\n\n\n\n\n\n\n1\n\n\nRemoteEvent \nChatted\n inside\n\n\nGetRemoteEvent(\"Chatted\")\n\n\n\n\n\n\n2\n\n\nFolder \nRemoteEvents\n in\n\n\nGetFolder(\"RemoteEvents\")\n\n\n\n\n\n\n3\n\n\nResources\n\n\nROOT\n\n\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\n\n\n\n\nOn the server, missing instances will be instantiated via \nInstance.new\n. On the client, the function will yield for the missing instances via \nWaitForChild\n.\n\n\n\n\n\n\nCaches results in \nResources:GetLocalTable(CLASSNAME:gsub(\"y$\", \"ie\") .. \"s\")\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nGet functions can also manage instance types that aren't instantiable by \nInstance.new\n. However, these instances must be preinstalled in the locations in which they would otherwise be instantiated because they cannot be generated at run-time. This allows you to do things like the following:\n\n\nlocal\n \nFalchion\n \n=\n \nResources\n:\nGetSword\n(\n\"Falchion\"\n)\n\n\n\n\n\n\n\n\n\nGetLocal functions\n\u00b6\n\n\n\n\nSummary\n\n\nGet functions in the form of \nGetLocalCLASSNAME\n work in the same way as regular Get functions, except clients may also instantiate missing instances and \nGetLocalFolder\n searches in different locations. Not meant to be used very much.\n\n\n\n\n\n\n\n\n\n\nMachine\n\n\nLOCALSTORAGE\n\n\nLOCALRESOURCES\n\n\n\n\n\n\n\n\n\n\nServer\n\n\nServerStorage\n\n\nServerStorage.Resources\n\n\n\n\n\n\nClient\n\n\nPlayers.LocalPlayer.PlayerScripts\n\n\nPlayers.LocalPlayer.PlayerScripts.Resources\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep\n\n\nObject to search for\n\n\nFunction call\n\n\n\n\n\n\n\n\n\n\n1\n\n\nBindableEvent \nAttacking\n inside\n\n\nGetLocalBindableEvent(\"Attacking\")\n\n\n\n\n\n\n2\n\n\nFolder \nBindableEvents\n in\n\n\nGetLocalFolder(\"BindableEvents\")\n\n\n\n\n\n\n3\n\n\nFolder \nLOCALSTORAGE.Resources\n\n\nLOCALRESOURCES\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nlocal\n \nAttacking\n \n=\n \nResources\n:\nGetLocalBindableEvent\n(\n\"Attacking\"\n)\n\n\n\n\n\nHere is what the above code would do if ran by the server versus what it would do if ran by a client:\n\n\n\n\n\n\n\n\nServer\n\n\nClient\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nIn Play-Solo Mode, all local objects will go under \nServerStorage\n, as there is no difference between the client and server. If you use identical Local-function calls on the client and server, this could cause conflicts in Play-Solo. The same problem applies to caches, which have \"Local\" appended to the front of the string to differentiate from regular caches. \nLOCALSTORAGE\n is typically just for \nGetLocalBindableEvent\n calls and having a place to store server-only Libraries, which are under \nGetLocalFolder(\"Resources\")\n.",
            "title": "Resources"
        },
        {
            "location": "/Resources/#resources",
            "text": "Resources  is the core resource manager and library loader for RoStrap. It is designed to streamline the retrieval and networking of resources.",
            "title": "Resources"
        },
        {
            "location": "/Resources/#functionality",
            "text": "Upon being  required  on the server for the first time,  Resources  moves libraries within  ServerStorage.Repository  to  ReplicatedStorage.Resources.Libraries , where both the client and server can  require  them via the function  LoadLibrary .   Libraries with \"Server\" in their name or in the name of a parent folder (not case-sensitive) are considered server-only libraries, and will not be moved to  ReplicatedStorage  with the rest of the libraries. Instead, these libraries will be given the tag  ServerLibraries  and will be moved to folder  ServerStorage.Resources . Libraries moved into  ReplicatedStorage  are tagged with the tag  ReplicatedLibraries  by the  plugin .   Info  Internally,  LoadLibrary  caches and returns  require(Resources:GetLibrary(LibraryName)) .  GetLibrary  is the only function that can \"retrieve\" objects from both  ServerStorage  and  ReplicatedStorage . This is because libraries tagged with either  ReplicatedLibraries  or  ServerLibraries  are added directly to its cache.    Note  Libraries will not be moved into  ReplicatedStorage  in Play-Solo.",
            "title": "Functionality"
        },
        {
            "location": "/Resources/#api",
            "text": "All methods of  Resources  have hybrid syntax, meaning they can be called using either a  :  or  .",
            "title": "API"
        },
        {
            "location": "/Resources/#loadlibrary",
            "text": "Summary  A require-by-string function which internally calls  require(Resources:GetLibrary(string LibraryName))  and caches the results.  Variant  Resources:LoadLibrary (\n     string  LibraryName\n)    Example  local   SortedArray   =   Resources : LoadLibrary ( \"SortedArray\" )  -- Some people like to overwrite the default require function  local   require   =   Resources . LoadLibrary  local   Signal   =   require ( \"Signal\" )     Info  This is the only function with a hard-coded name for its cache, so you may access cached require results using the following:  -- Resources uses this table to cache LoadLibrary results  local   LoadedLibraries   =   Resources : GetLocalTable ( \"LoadedLibraries\" )",
            "title": "LoadLibrary"
        },
        {
            "location": "/Resources/#getlocaltable",
            "text": "Summary  A function which caches a local table by string, and returns said table. Does not replicate. Useful for eliminating the need for  _G  or ModuleScripts which return an empty table.  Table  Resources:GetLocalTable (\n     string  TableName\n)    Example  -- Can be used in any script on the same machine to get this table  local   MyItems   =   Resources : GetLocalTable ( \"MyItems\" )   -- {}     Info  Resources uses  GetLocalTable  internally, so you can access its internals using this function:  -- Resources uses this table to cache LoadLibrary results  local   LoadedLibraries   =   Resources : GetLocalTable ( \"LoadedLibraries\" )",
            "title": "GetLocalTable"
        },
        {
            "location": "/Resources/#get-functions",
            "text": "Summary  Get functions can be procedurally generated by  Resources  at run-time in the form of  Resources:GetCLASSNAME(string Name) . These functions return an  Instance  of  Name  under  Resources:GetFolder(CLASSNAME:gsub(\"y$\", \"ie\") .. \"s\") .  Ref < Instance > Resources:GetCLASSNAME (\n     string  InstanceName\n)   The following is the internal call tree. Keep in mind that these functions cache so the 3 rd  function will only run once per machine and  GetFolder  will only run once per function generation (e.g. the first time  GetRemoteEvent  is called).     Step  Object to search for  Function call      1  RemoteEvent  Chatted  inside  GetRemoteEvent(\"Chatted\")    2  Folder  RemoteEvents  in  GetFolder(\"RemoteEvents\")    3  Resources  ROOT       Info    On the server, missing instances will be instantiated via  Instance.new . On the client, the function will yield for the missing instances via  WaitForChild .    Caches results in  Resources:GetLocalTable(CLASSNAME:gsub(\"y$\", \"ie\") .. \"s\")      Example  Get functions can also manage instance types that aren't instantiable by  Instance.new . However, these instances must be preinstalled in the locations in which they would otherwise be instantiated because they cannot be generated at run-time. This allows you to do things like the following:  local   Falchion   =   Resources : GetSword ( \"Falchion\" )",
            "title": "Get functions"
        },
        {
            "location": "/Resources/#getlocal-functions",
            "text": "Summary  Get functions in the form of  GetLocalCLASSNAME  work in the same way as regular Get functions, except clients may also instantiate missing instances and  GetLocalFolder  searches in different locations. Not meant to be used very much.      Machine  LOCALSTORAGE  LOCALRESOURCES      Server  ServerStorage  ServerStorage.Resources    Client  Players.LocalPlayer.PlayerScripts  Players.LocalPlayer.PlayerScripts.Resources        Step  Object to search for  Function call      1  BindableEvent  Attacking  inside  GetLocalBindableEvent(\"Attacking\")    2  Folder  BindableEvents  in  GetLocalFolder(\"BindableEvents\")    3  Folder  LOCALSTORAGE.Resources  LOCALRESOURCES      Example  local   Attacking   =   Resources : GetLocalBindableEvent ( \"Attacking\" )   Here is what the above code would do if ran by the server versus what it would do if ran by a client:     Server  Client             Warning  In Play-Solo Mode, all local objects will go under  ServerStorage , as there is no difference between the client and server. If you use identical Local-function calls on the client and server, this could cause conflicts in Play-Solo. The same problem applies to caches, which have \"Local\" appended to the front of the string to differentiate from regular caches.  LOCALSTORAGE  is typically just for  GetLocalBindableEvent  calls and having a place to store server-only Libraries, which are under  GetLocalFolder(\"Resources\") .",
            "title": "GetLocal functions"
        },
        {
            "location": "/Libraries/",
            "text": "Libraries\n\u00b6\n\n\nWhen you use RoStrap, you are using tested and tried Libraries which are continually \nmaintained\n by the best developers in town! Whenever a developer updates their Library on GitHub, you will see an update button appear (under the \nINSTALLED\n tab).\n\n\n\n\nUpdates are detected when your source code doesn't match the source code of the latest version of GitHub, excluding whitespace, comments, and configurable variables. Configurable variables have to look like this:\n\n\nlocal\n \nALL_CAMEL_CASE\n \n=\n \n\"SINGLE-LINE-VALUE\"",
            "title": "Introduction"
        },
        {
            "location": "/Libraries/#libraries",
            "text": "When you use RoStrap, you are using tested and tried Libraries which are continually  maintained  by the best developers in town! Whenever a developer updates their Library on GitHub, you will see an update button appear (under the  INSTALLED  tab).   Updates are detected when your source code doesn't match the source code of the latest version of GitHub, excluding whitespace, comments, and configurable variables. Configurable variables have to look like this:  local   ALL_CAMEL_CASE   =   \"SINGLE-LINE-VALUE\"",
            "title": "Libraries"
        },
        {
            "location": "/Libraries/Classes/Enumeration/",
            "text": "Enumeration\n\u00b6\n\n\nPure-lua Enumeration implementation that function identically to Roblox Enums, except one may declare their own:\n\n\nlocal\n \nEnumeration\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Enumeration\"\n)\n\n\n\nEnumeration\n.\nButtonType\n \n=\n \n{\n\"Custom\"\n,\n \n\"Flat\"\n,\n \n\"Raised\"\n}\n\n\nEnumeration\n.\nSelectionControllerType\n \n=\n \n{\n\"Checkbox\"\n,\n \n\"Radio\"\n,\n \n\"Switch\"\n}\n\n\n\nlocal\n \nRadio\n \n=\n \nEnumeration\n.\nSelectionControllerType\n.\nRadio\n\n\n\nprint\n(\nRadio\n)\n\n\nprint\n(\nRadio\n.\nEnumType\n)\n\n\nprint\n(\nRadio\n.\nName\n)\n\n\nprint\n(\nRadio\n.\nValue\n)\n\n\n\n\n\n> Enumeration.SelectionControllerType.Radio\n> SelectionControllerType\n> Radio\n> 1\n\n\n\n\nEnumerations have a \nValue\n equal to their index in the declarative array minus one:\n\n\n\n\n\n\n\n\nEnumeration.ButtonType = {\n\n\n\"Custom\"\n\n\n\"Flat\"\n\n\n\"Raised\"\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n1\n\n\n2\n\n\n\n\n\n\n\n\n\n\nIn this implementation, we use \nEnumeration\n in the places where Roblox uses \nEnum\n:\n\n\nprint\n(\n\"All Roblox Enums:\"\n)\n\n\nfor\n \ni\n,\n \nEnumType\n \nin\n \nipairs\n(\nEnum\n:\nGetEnums\n())\n \ndo\n\n    \nprint\n(\ni\n,\n \nEnumType\n)\n\n    \nfor\n \nj\n,\n \nEnumName\n \nin\n \nipairs\n(\nEnumType\n:\nGetEnumItems\n())\n \ndo\n\n        \nprint\n(\n\"   \"\n,\n \nj\n,\n \nEnumName\n)\n\n    \nend\n\n\nend\n\n\n\nprint\n(\n\"All RoStrap Enumerations:\"\n)\n\n\nfor\n \ni\n,\n \nEnumType\n \nin\n \nipairs\n(\nEnumeration\n:\nGetEnumerations\n())\n \ndo\n\n    \nprint\n(\ni\n,\n \nEnumType\n)\n\n    \nfor\n \nj\n,\n \nEnumName\n \nin\n \nipairs\n(\nEnumType\n:\nGetEnumerationItems\n())\n \ndo\n\n        \nprint\n(\n\"   \"\n,\n \nj\n,\n \nEnumName\n)\n\n    \nend\n\n\nend\n\n\n\n\n\nFurther documentation on Enumerations here.",
            "title": "Enumeration"
        },
        {
            "location": "/Libraries/Classes/Enumeration/#enumeration",
            "text": "Pure-lua Enumeration implementation that function identically to Roblox Enums, except one may declare their own:  local   Enumeration   =   Resources : LoadLibrary ( \"Enumeration\" )  Enumeration . ButtonType   =   { \"Custom\" ,   \"Flat\" ,   \"Raised\" }  Enumeration . SelectionControllerType   =   { \"Checkbox\" ,   \"Radio\" ,   \"Switch\" }  local   Radio   =   Enumeration . SelectionControllerType . Radio  print ( Radio )  print ( Radio . EnumType )  print ( Radio . Name )  print ( Radio . Value )   > Enumeration.SelectionControllerType.Radio\n> SelectionControllerType\n> Radio\n> 1  Enumerations have a  Value  equal to their index in the declarative array minus one:     Enumeration.ButtonType = {  \"Custom\"  \"Flat\"  \"Raised\"  }       0  1  2      In this implementation, we use  Enumeration  in the places where Roblox uses  Enum :  print ( \"All Roblox Enums:\" )  for   i ,   EnumType   in   ipairs ( Enum : GetEnums ())   do \n     print ( i ,   EnumType ) \n     for   j ,   EnumName   in   ipairs ( EnumType : GetEnumItems ())   do \n         print ( \"   \" ,   j ,   EnumName ) \n     end  end  print ( \"All RoStrap Enumerations:\" )  for   i ,   EnumType   in   ipairs ( Enumeration : GetEnumerations ())   do \n     print ( i ,   EnumType ) \n     for   j ,   EnumName   in   ipairs ( EnumType : GetEnumerationItems ())   do \n         print ( \"   \" ,   j ,   EnumName ) \n     end  end   Further documentation on Enumerations here.",
            "title": "Enumeration"
        },
        {
            "location": "/Libraries/Events/Maid/",
            "text": "Maid\n\u00b6\n\n\nManages the cleaning of events and other things.\n\n\nlocal\n \nMaid\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Maid\"\n)\n\n\n\n\n\nAPI\n\u00b6\n\n\nMaid Maid.new()\n    Generates a new Maid object\n\nnumber Maid:GiveTask(Task)\n    Adds a Task to the Maid table, incremented by 1\n    @returns index the Task was placed at\n\nvoid Maid:LinkToInstance(Instance)\n    Makes the Maid clean up when the instance is destroyed\n    @param Instance Instance The Instance the Maid will wait for to be Destroyed\n    @returns table Connection that can be Disconnect()ed to unlink to Instance\n\nvoid Maid:DoCleaning()\n    Disconnects all Events, Destroys all Objects, and calls all functions stored as Tasks\n    Maid:Destroy() and Maid:Disconnect() are the same thing\n\nvoid Maid:Destroy()\n    Same as DoCleaning()\n\nvoid Maid:Disconnect()\n    Same as DoCleaning()\n\n\n\n\nMaid[key] = (function)            Adds a function to call at cleanup\nMaid[key] = (Instance)            Adds an Object to be Destroyed at cleanup\nMaid[key] = (RBXScriptConnection) Adds a connection to be Disconnected at cleanup\nMaid[key] = (Maid)                Maids can act as an event connection, allowing a Maid to clean up other maids\nMaid[key] = nil                   Removes a named task. This cleans up the previous Maid[key]",
            "title": "Maid"
        },
        {
            "location": "/Libraries/Events/Maid/#maid",
            "text": "Manages the cleaning of events and other things.  local   Maid   =   Resources : LoadLibrary ( \"Maid\" )",
            "title": "Maid"
        },
        {
            "location": "/Libraries/Events/Maid/#api",
            "text": "Maid Maid.new()\n    Generates a new Maid object\n\nnumber Maid:GiveTask(Task)\n    Adds a Task to the Maid table, incremented by 1\n    @returns index the Task was placed at\n\nvoid Maid:LinkToInstance(Instance)\n    Makes the Maid clean up when the instance is destroyed\n    @param Instance Instance The Instance the Maid will wait for to be Destroyed\n    @returns table Connection that can be Disconnect()ed to unlink to Instance\n\nvoid Maid:DoCleaning()\n    Disconnects all Events, Destroys all Objects, and calls all functions stored as Tasks\n    Maid:Destroy() and Maid:Disconnect() are the same thing\n\nvoid Maid:Destroy()\n    Same as DoCleaning()\n\nvoid Maid:Disconnect()\n    Same as DoCleaning()  Maid[key] = (function)            Adds a function to call at cleanup\nMaid[key] = (Instance)            Adds an Object to be Destroyed at cleanup\nMaid[key] = (RBXScriptConnection) Adds a connection to be Disconnected at cleanup\nMaid[key] = (Maid)                Maids can act as an event connection, allowing a Maid to clean up other maids\nMaid[key] = nil                   Removes a named task. This cleans up the previous Maid[key]",
            "title": "API"
        },
        {
            "location": "/Libraries/Events/Signal/",
            "text": "Signal\n\u00b6\n\n\n\n\nSummary\n\n\nA class to create API-compatible Roblox Events\n\n\nThis new version designed by Anaminus addresses two flaws in previous implementations:\n\n\n\n\nPrevious versions held a reference to the last set of fired arguments.\n\n\nArguments would be overridden if the signal was fired by a listener.\n\n\n\n\n\n\nLibrary API\n\u00b6\n\n\nSignal.new\n\u00b6\n\n\n\n\nSummary\n\n\nSignal\n Signal.new (\n    \nfunction\n Constructor,\n    \nfunction\n Destructor\n)\n\n\nReturns a new signal. Receives optional constructor and destructor functions. The constructor is called when the number of listeners/threads becomes greater than 0. The destructor is called when then number of threads/listeners becomes 0. The destructor   receives as arguments the values returned by the constructor.\n\n\n\n\n\n\nExample\n\n\nlocal\n \nSignal\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Signal\"\n)\n\n\nlocal\n \nEvent\n \n=\n \nSignal\n.\nnew\n()\n\n\n\n\n\n\n\nSignal API\n\u00b6\n\n\nFire\n\u00b6\n\n\n\n\nSummary\n\n\nvoid\n Signal:Fire (\n    \nTuple\n<\nVariant\n> arguments\n)\n\nFire the signal, passing the arguments to each listener and waiting threads. Arguments are passed by reference.\n\n\n\n\nWait\n\u00b6\n\n\n\n\nSummary\n\n\nTuple\n<\nVariant\n> Signal:Wait ()\n\n\nBlock the current thread until the signal is fired. Returns the arguments passed to Fire.\n\n\n\n\nDestroy\n\u00b6\n\n\n\n\nSummary\n\n\nvoid\n Signal:Destroy ()\n\n\nDisconnects all listeners and becomes unassociated with currently blocked threads. The signal becomes unusable and ready to be garbage collected.\n\n\n\n\nConnect\n\u00b6\n\n\n\n\nSummary\n\n\nPseudoScriptConnection\n RBXScriptSignal:Connect(\nfunction\n<\nvoid\n>(\nTuple\n<\nVariant\n>) func)\n\n\nSets a function to be called when the signal is fired. The listener function receives the arguments passed to Fire. Returns a SignalConnection.\n\n\n\n\nPseudoScriptConnection API\n\u00b6\n\n\n\n\nSummary\n\n\nvoid\n PseudoScriptConnection:Disconnect()\n\nDisconnects the listener, causing it to no longer be called when the signal is fired.\n\n\n\n\nFields\n\u00b6\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nDefault value\n\n\nType\n\n\n\n\n\n\n\n\n\n\nConnected\n\n\nWhether the listener is connected\n\n\ntrue\n\n\nbool",
            "title": "Signal"
        },
        {
            "location": "/Libraries/Events/Signal/#signal",
            "text": "Summary  A class to create API-compatible Roblox Events  This new version designed by Anaminus addresses two flaws in previous implementations:   Previous versions held a reference to the last set of fired arguments.  Arguments would be overridden if the signal was fired by a listener.",
            "title": "Signal"
        },
        {
            "location": "/Libraries/Events/Signal/#library-api",
            "text": "",
            "title": "Library API"
        },
        {
            "location": "/Libraries/Events/Signal/#signalnew",
            "text": "Summary  Signal  Signal.new (\n     function  Constructor,\n     function  Destructor\n)  Returns a new signal. Receives optional constructor and destructor functions. The constructor is called when the number of listeners/threads becomes greater than 0. The destructor is called when then number of threads/listeners becomes 0. The destructor   receives as arguments the values returned by the constructor.    Example  local   Signal   =   Resources : LoadLibrary ( \"Signal\" )  local   Event   =   Signal . new ()",
            "title": "Signal.new"
        },
        {
            "location": "/Libraries/Events/Signal/#signal-api",
            "text": "",
            "title": "Signal API"
        },
        {
            "location": "/Libraries/Events/Signal/#fire",
            "text": "Summary  void  Signal:Fire (\n     Tuple < Variant > arguments\n) \nFire the signal, passing the arguments to each listener and waiting threads. Arguments are passed by reference.",
            "title": "Fire"
        },
        {
            "location": "/Libraries/Events/Signal/#wait",
            "text": "Summary  Tuple < Variant > Signal:Wait ()  Block the current thread until the signal is fired. Returns the arguments passed to Fire.",
            "title": "Wait"
        },
        {
            "location": "/Libraries/Events/Signal/#destroy",
            "text": "Summary  void  Signal:Destroy ()  Disconnects all listeners and becomes unassociated with currently blocked threads. The signal becomes unusable and ready to be garbage collected.",
            "title": "Destroy"
        },
        {
            "location": "/Libraries/Events/Signal/#connect",
            "text": "Summary  PseudoScriptConnection  RBXScriptSignal:Connect( function < void >( Tuple < Variant >) func)  Sets a function to be called when the signal is fired. The listener function receives the arguments passed to Fire. Returns a SignalConnection.",
            "title": "Connect"
        },
        {
            "location": "/Libraries/Events/Signal/#pseudoscriptconnection-api",
            "text": "Summary  void  PseudoScriptConnection:Disconnect() \nDisconnects the listener, causing it to no longer be called when the signal is fired.",
            "title": "PseudoScriptConnection API"
        },
        {
            "location": "/Libraries/Events/Signal/#fields",
            "text": "Field  Description  Default value  Type      Connected  Whether the listener is connected  true  bool",
            "title": "Fields"
        },
        {
            "location": "/Libraries/EvLightning/",
            "text": "EvLightning\n\u00b6\n\n\nEvLightning is a Roblox Lua library that aims to generate realistic-looking lightning bolts. This could be used to easily add lightning strike effects to your game.\n\n\n\n  \n\n\n\n\n\nUsage\n\u00b6\n\n\nlocal\n \nLightningBolt\n \n=\n \nrequire\n(\npath\n.\nto\n.\nEvLightning\n)\n\n\n\nlocal\n \nmyBolt\n \n=\n \nLightningBolt\n.\nnew\n(\nVector3\n.\nnew\n(\n0\n,\n \n400\n,\n \n0\n),\n \nVector3\n.\nnew\n(\n0\n,\n \n0\n,\n \n0\n),\n \n{\n\n  \ncolor\n \n=\n \nBrickColor\n.\nnew\n(\n\"Really red\"\n);\n\n  \n-- More options are available, see below...\n\n\n})\n\n\nmyBolt\n:\nDraw\n(\nworkspace\n)\n\n\n\n\n\nA lightning bolt is split into lines, and where the lines meet is considered to be a \"bend\". At each bend, there is a chance to create a fork, which will create another bolt with its own bends, which in turn have chances to create their own forks, etc. You can control how many bends are in the bolt and the chance of creating a fork at each bend.\n\n\nAPI\n\u00b6\n\n\nLightningBolt\n LightningBolt.new(\nVector3\n from, \nVector3\n to[, \ndictionary\n options])\n\u00b6\n\n\nReturns an instance of \nLightningBolt\n. Automatically generates in the constructor, but further methods must be called on the returned instance to render the bolt.\n\n\nOptions\n\u00b6\n\n\nThere are a number of options that you can pass in a third argument to \nLightningBolt.new\n in the form of a table dictionary. All options are optional, and have default values.\n\n\n\n\n\n\n\n\nOption name\n\n\nDescription\n\n\nDefault value\n\n\nType\n\n\n\n\n\n\n\n\n\n\nseed\n\n\nA numerical seed which could be used to generate the same lightning bolt across a network.\n\n\nRandom\n\n\nNumber\n\n\n\n\n\n\nbends\n\n\nThe number of bends the main bolt should have.\n\n\n6\n\n\nInteger\n\n\n\n\n\n\nfork_bends\n\n\nThe number of bends to put into forks off of the main bolt.\n\n\n2\n\n\nInteger\n\n\n\n\n\n\nfork_chance\n\n\nThe chance to create a new fork off of each bend. (0-100)\n\n\n50\n\n\nNumber\n\n\n\n\n\n\ntransparency\n\n\nThe transparency of the main bolt. Transparency is reduced at every fork.\n\n\n0.4\n\n\nNumber\n\n\n\n\n\n\nthickness\n\n\nThe thickness of the main bolt. Thickness is reduced at every fork.\n\n\n1\n\n\nNumber\n\n\n\n\n\n\nmax_depth\n\n\nThe maximum depth that forks can reach off the main bolt, which is depth 0.\n\n\n3\n\n\nInteger\n\n\n\n\n\n\ncolor\n\n\nThe color of the bolt\n\n\nWhite\n\n\nBrickColor or Color3\n\n\n\n\n\n\nmaterial\n\n\nThe material of the bolt\n\n\nEnum.Material.Neon\n\n\nEnum.Material\n\n\n\n\n\n\ndecay\n\n\nThe number of seconds for the bolt to exist after being drawn.\n\n\nInfinite\n\n\nNumber\n\n\n\n\n\n\n\n\nNote that the \nfork_chance\n option is not an equal chance for every bend in the bolt. The chance is distributed in a gradient down the length of the bolt, meaning that if the fork_chance is 50, then at the very top it will be 0, at the middle it will be 25, and at the very bottom it will be 50. This is done so that less forks are generated towards the top, which makes the bolt look more realistic. If you need to create upwards-forking lightning, then simply reverse the to and from arguments.\n\n\nvoid\n bolt:Draw([\nInstance\n parent = Workspace])\n\u00b6\n\n\nDraws the lightning bolt in the world with the given options. An optional argument, \nparent\n, can be passed, which will be the parent of the generated lightning bolt parts. If this argument is omitted, there will be a new model created in Workspace containing the bolt parts.\n\n\narray\n bolt:GetLines()\n\u00b6\n\n\nReturns a table of tables, containing the line information. The member tables have the keys origin, goal, and depth. This is only necessary if you want to draw the lightning bolt manually (i.e. not calling Draw).\n\n\n{\n\n    \n{\n\n        \norigin\n  \n=\n \nVector3\n \norigin\n,\n\n        \ngoal\n    \n=\n \nVector3\n \nendpoint\n,\n\n        \ndepth\n   \n=\n \nNumber\n \ndepth\n\n    \n},\n\n    \n{\n\n        \norigin\n  \n=\n \nVector3\n \norigin\n,\n\n        \ngoal\n    \n=\n \nVector3\n \nendpoint\n,\n\n        \ndepth\n   \n=\n \nNumber\n \ndepth\n\n    \n},\n\n    \n-- ...\n\n\n}\n\n\n\n\n\nvoid\n bolt:Destroy()\n\u00b6\n\n\nIf the lightning bolt has been drawn, this method will destroy the model that was created.\n\n\ndictionary\n bolt:GetOptions()\n\u00b6\n\n\nReturns a table of the options that were passed into the constructor. Default values are not applied here.\n\n\nbool\n bolt:IsDestroyed()\n\u00b6\n\n\nReturns true if the lightning bolt has either been destroyed or has decayed.\n\n\nbool\n bolt:IsDrawn()\n\u00b6\n\n\nReturns true of the \nDraw\n method has been called on this particular instance.",
            "title": "EvLightning"
        },
        {
            "location": "/Libraries/EvLightning/#evlightning",
            "text": "EvLightning is a Roblox Lua library that aims to generate realistic-looking lightning bolts. This could be used to easily add lightning strike effects to your game.",
            "title": "EvLightning"
        },
        {
            "location": "/Libraries/EvLightning/#usage",
            "text": "local   LightningBolt   =   require ( path . to . EvLightning )  local   myBolt   =   LightningBolt . new ( Vector3 . new ( 0 ,   400 ,   0 ),   Vector3 . new ( 0 ,   0 ,   0 ),   { \n   color   =   BrickColor . new ( \"Really red\" ); \n   -- More options are available, see below...  })  myBolt : Draw ( workspace )   A lightning bolt is split into lines, and where the lines meet is considered to be a \"bend\". At each bend, there is a chance to create a fork, which will create another bolt with its own bends, which in turn have chances to create their own forks, etc. You can control how many bends are in the bolt and the chance of creating a fork at each bend.",
            "title": "Usage"
        },
        {
            "location": "/Libraries/EvLightning/#api",
            "text": "",
            "title": "API"
        },
        {
            "location": "/Libraries/EvLightning/#lightningbolt-lightningboltnewvector3-from-vector3-to-dictionary-options",
            "text": "Returns an instance of  LightningBolt . Automatically generates in the constructor, but further methods must be called on the returned instance to render the bolt.",
            "title": "LightningBolt LightningBolt.new(Vector3 from, Vector3 to[, dictionary options])"
        },
        {
            "location": "/Libraries/EvLightning/#options",
            "text": "There are a number of options that you can pass in a third argument to  LightningBolt.new  in the form of a table dictionary. All options are optional, and have default values.     Option name  Description  Default value  Type      seed  A numerical seed which could be used to generate the same lightning bolt across a network.  Random  Number    bends  The number of bends the main bolt should have.  6  Integer    fork_bends  The number of bends to put into forks off of the main bolt.  2  Integer    fork_chance  The chance to create a new fork off of each bend. (0-100)  50  Number    transparency  The transparency of the main bolt. Transparency is reduced at every fork.  0.4  Number    thickness  The thickness of the main bolt. Thickness is reduced at every fork.  1  Number    max_depth  The maximum depth that forks can reach off the main bolt, which is depth 0.  3  Integer    color  The color of the bolt  White  BrickColor or Color3    material  The material of the bolt  Enum.Material.Neon  Enum.Material    decay  The number of seconds for the bolt to exist after being drawn.  Infinite  Number     Note that the  fork_chance  option is not an equal chance for every bend in the bolt. The chance is distributed in a gradient down the length of the bolt, meaning that if the fork_chance is 50, then at the very top it will be 0, at the middle it will be 25, and at the very bottom it will be 50. This is done so that less forks are generated towards the top, which makes the bolt look more realistic. If you need to create upwards-forking lightning, then simply reverse the to and from arguments.",
            "title": "Options"
        },
        {
            "location": "/Libraries/EvLightning/#void-boltdrawinstance-parent-workspace",
            "text": "Draws the lightning bolt in the world with the given options. An optional argument,  parent , can be passed, which will be the parent of the generated lightning bolt parts. If this argument is omitted, there will be a new model created in Workspace containing the bolt parts.",
            "title": "void bolt:Draw([Instance parent = Workspace])"
        },
        {
            "location": "/Libraries/EvLightning/#array-boltgetlines",
            "text": "Returns a table of tables, containing the line information. The member tables have the keys origin, goal, and depth. This is only necessary if you want to draw the lightning bolt manually (i.e. not calling Draw).  { \n     { \n         origin    =   Vector3   origin , \n         goal      =   Vector3   endpoint , \n         depth     =   Number   depth \n     }, \n     { \n         origin    =   Vector3   origin , \n         goal      =   Vector3   endpoint , \n         depth     =   Number   depth \n     }, \n     -- ...  }",
            "title": "array bolt:GetLines()"
        },
        {
            "location": "/Libraries/EvLightning/#void-boltdestroy",
            "text": "If the lightning bolt has been drawn, this method will destroy the model that was created.",
            "title": "void bolt:Destroy()"
        },
        {
            "location": "/Libraries/EvLightning/#dictionary-boltgetoptions",
            "text": "Returns a table of the options that were passed into the constructor. Default values are not applied here.",
            "title": "dictionary bolt:GetOptions()"
        },
        {
            "location": "/Libraries/EvLightning/#bool-boltisdestroyed",
            "text": "Returns true if the lightning bolt has either been destroyed or has decayed.",
            "title": "bool bolt:IsDestroyed()"
        },
        {
            "location": "/Libraries/EvLightning/#bool-boltisdrawn",
            "text": "Returns true of the  Draw  method has been called on this particular instance.",
            "title": "bool bolt:IsDrawn()"
        },
        {
            "location": "/Libraries/Debug/",
            "text": "Debugging Tools\n\u00b6\n\n\nStandard RoStrap debugging library\n\n\nStandard Debug Module\n\u00b6\n\n\nThis module has standard helper functions to assist in debugging.\n\n\nAPI\n\u00b6\n\n\nlocal\n \nDebug\n \n=\n \nrequire\n(\n\"Debug\"\n)\n\n\n\n\n\nstring Debug.TableToString (table Table [, string TableName])\n    /// Pretty self-explanatory\n    // @param table Table The table to convert into a string\n    // @param string TableName [Optional]: Puts `local TableName = ` at the beginning\n    // @returns a readable string of the table\n\n\n\nstring Debug.DirectoryToString (RbxObject Object)\n    /// A fixed version of GetFullName\n    // @param RbxObject Object the Object to get the directory of\n    // @returns string A readable and properly formatted string of the directory\n\n\n\nstring Debug.Inspect (any Object)\n    /// Returns a string representation of anything.\n    // @param any Object The object you wish to represent as a string.\n    // @returns a readable string representation of the object.\n\n\n\nstring Debug.EscapeString (string String)\n    /// Turns strings into Lua-readble format\n    // @returns Objects location in proper Lua format\n    // Useful for when you are doing string-intensive coding\n    // Those minus signs are so tricky!\n\n\n\nfunction function Debug.AlphabeticalOrder (table Dictionary)\n    /// Iteration function that iterates over a dictionary in alphabetical order\n    // @param table Dictionary That which will be iterated over in alphabetical order\n    // A dictionary looks like this: {Apple = true, Noodles = 5, Soup = false}\n    // Not case-sensitive\n\n\n\nvoid function Debug.Error (string ErrorMessage, ... strings argumentsToFormatIn ...)\n    // Standard RoStrap Erroring system\n    // Prefixing ErrorMessage with '!' makes it expect the [error origin].Name as first parameter in {...}\n    // Past the initial Error string, subsequent arguments get unpacked in a string.format of the error string\n    // Arguments formmatted into the string get stringified (see above function)\n    // Assert falls back on Error\n    // Error blames the latest item on the traceback as the cause of the error\n    // Error makes it clear which Library and function are being misused\n\n\n\n<Condition, void> function Debug.Assert (Variant Condition, ... TupleToSendToError ...)\n    // Returns Condition or Debug.Error(...)\n\n\n\nvoid function Debug.Warn (string ErrorMessage, ... strings argumentsToFormatIn ...)\n    // Functions the same as Debug.Error, but internally calls warn instead of error",
            "title": "Debug"
        },
        {
            "location": "/Libraries/Debug/#debugging-tools",
            "text": "Standard RoStrap debugging library",
            "title": "Debugging Tools"
        },
        {
            "location": "/Libraries/Debug/#standard-debug-module",
            "text": "This module has standard helper functions to assist in debugging.",
            "title": "Standard Debug Module"
        },
        {
            "location": "/Libraries/Debug/#api",
            "text": "local   Debug   =   require ( \"Debug\" )   string Debug.TableToString (table Table [, string TableName])\n    /// Pretty self-explanatory\n    // @param table Table The table to convert into a string\n    // @param string TableName [Optional]: Puts `local TableName = ` at the beginning\n    // @returns a readable string of the table  string Debug.DirectoryToString (RbxObject Object)\n    /// A fixed version of GetFullName\n    // @param RbxObject Object the Object to get the directory of\n    // @returns string A readable and properly formatted string of the directory  string Debug.Inspect (any Object)\n    /// Returns a string representation of anything.\n    // @param any Object The object you wish to represent as a string.\n    // @returns a readable string representation of the object.  string Debug.EscapeString (string String)\n    /// Turns strings into Lua-readble format\n    // @returns Objects location in proper Lua format\n    // Useful for when you are doing string-intensive coding\n    // Those minus signs are so tricky!  function function Debug.AlphabeticalOrder (table Dictionary)\n    /// Iteration function that iterates over a dictionary in alphabetical order\n    // @param table Dictionary That which will be iterated over in alphabetical order\n    // A dictionary looks like this: {Apple = true, Noodles = 5, Soup = false}\n    // Not case-sensitive  void function Debug.Error (string ErrorMessage, ... strings argumentsToFormatIn ...)\n    // Standard RoStrap Erroring system\n    // Prefixing ErrorMessage with '!' makes it expect the [error origin].Name as first parameter in {...}\n    // Past the initial Error string, subsequent arguments get unpacked in a string.format of the error string\n    // Arguments formmatted into the string get stringified (see above function)\n    // Assert falls back on Error\n    // Error blames the latest item on the traceback as the cause of the error\n    // Error makes it clear which Library and function are being misused  <Condition, void> function Debug.Assert (Variant Condition, ... TupleToSendToError ...)\n    // Returns Condition or Debug.Error(...)  void function Debug.Warn (string ErrorMessage, ... strings argumentsToFormatIn ...)\n    // Functions the same as Debug.Error, but internally calls warn instead of error",
            "title": "API"
        },
        {
            "location": "/Libraries/Helper/FastSpawn/",
            "text": "FastSpawn\n\u00b6\n\n\nExpensive method of running a function on a new thread without yielding a frame (like \nspawn\n) and works within Roblox's thread scheduler. If passed arguments, they will be passed by reference.\n\n\nlocal\n \nt\n \n=\n \n{}\n\n\nprint\n(\nt\n)\n\n\n\nFastSpawn\n(\nfunction\n(...)\n\n    \nwait\n(\n5\n)\n\n    \nprint\n(...)\n\n\nend\n,\n \nt\n)",
            "title": "FastSpawn"
        },
        {
            "location": "/Libraries/Helper/FastSpawn/#fastspawn",
            "text": "Expensive method of running a function on a new thread without yielding a frame (like  spawn ) and works within Roblox's thread scheduler. If passed arguments, they will be passed by reference.  local   t   =   {}  print ( t )  FastSpawn ( function (...) \n     wait ( 5 ) \n     print (...)  end ,   t )",
            "title": "FastSpawn"
        },
        {
            "location": "/Libraries/Helper/Make/",
            "text": "Make\n\u00b6\n\n\nA shortcut function for creating instances\n\n\nYou probably shouldn't use this function, but if you really really like it, here it is.\n\nlocal\n \nResources\n \n=\n \nrequire\n(\nReplicatedStorage\n:\nWaitForChild\n(\n\"Resources\"\n))\n\n\nlocal\n \nMake\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Make\"\n)\n\n\n\nMake\n(\n\"TextLabel\"\n){\n\n    \nTextSize\n \n=\n \n11\n;\n\n    \nFont\n \n=\n \n\"Arial\"\n;\n\n    \nName\n \n=\n \n\"Yup\"\n;\n\n    \nParent\n \n=\n \nworkspace\n;\n\n\n}\n\n\n\nYou can also create multiple instances at once. When you pass subsequent tables as parameters, the object created by the first table is Cloned and modified by the properties in its table. Each subsequent table generates a new instance.\n\nMake\n(\n\"TextLabel\"\n)({\n\n    \nTextSize\n \n=\n \n11\n;\n\n    \nFont\n \n=\n \n\"Arial\"\n;\n\n    \nName\n \n=\n \n\"Yup\"\n;\n\n    \nParent\n \n=\n \nworkspace\n;\n\n\n},\n \n{\n\n    \nName\n \n=\n \n\"So!\"\n;\n\n    \nFont\n \n=\n \n\"SourceSans\"\n;\n\n\n},\n \n{\n\n    \nName\n \n=\n \n\"Yellow!\"\n;\n\n\n})",
            "title": "Make"
        },
        {
            "location": "/Libraries/Helper/Make/#make",
            "text": "A shortcut function for creating instances  You probably shouldn't use this function, but if you really really like it, here it is. local   Resources   =   require ( ReplicatedStorage : WaitForChild ( \"Resources\" ))  local   Make   =   Resources : LoadLibrary ( \"Make\" )  Make ( \"TextLabel\" ){ \n     TextSize   =   11 ; \n     Font   =   \"Arial\" ; \n     Name   =   \"Yup\" ; \n     Parent   =   workspace ;  }  \nYou can also create multiple instances at once. When you pass subsequent tables as parameters, the object created by the first table is Cloned and modified by the properties in its table. Each subsequent table generates a new instance. Make ( \"TextLabel\" )({ \n     TextSize   =   11 ; \n     Font   =   \"Arial\" ; \n     Name   =   \"Yup\" ; \n     Parent   =   workspace ;  },   { \n     Name   =   \"So!\" ; \n     Font   =   \"SourceSans\" ;  },   { \n     Name   =   \"Yellow!\" ;  })",
            "title": "Make"
        },
        {
            "location": "/Libraries/Input/Keys/",
            "text": "Keys\n\u00b6\n\n\nA light-weight library for simplifying Key input.\n\n\nAPI\n\u00b6\n\n\nKeys\n\u00b6\n\n\nThe library returns a table \nKeys\n. Within this table, Keys from Enum.KeyCode can be indexed.\n\nlocal\n \nResources\n \n=\n \nrequire\n(\ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n):\nWaitForChild\n(\n\"Resources\"\n))\n\n\nlocal\n \nKeys\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Keys\"\n)\n\n\n\n-- Each of these can be called with either a '.' or a ':', as it doesn't need 'self'\n\n\nKeys\n:\nPause\n()\n \n-- Disconnects this module's InputEnded and InputBegan connections to UserInputService\n\n\nKeys\n:\nResume\n()\n \n-- Reconnects what Pause disconnects\n\n\n\nlocal\n \nQ\n \n=\n \nKeys\n.\nQ\n \n-- returns a Key Object\n\n\n\n\nKey\n\u00b6\n\n\nThese table objects contain two custom Signals (technically, they are interfaces). \nKeyDown\n and \nKeyUp\n\n\nlocal\n \nQ\n \n=\n \nKeys\n.\nQ\n \n-- returns a Key Object\n\n\n\nQ\n.\nKeyDown\n:\nConnect\n(\nfunction\n()\n\n    \nprint\n(\n\"Q was pressed!\"\n)\n\n\nend\n)\n\n\n\nQ\n.\nKeyUp\n:\nConnect\n(\nfunction\n()\n\n    \nprint\n(\n\"Q was let go!\"\n)\n\n\nend\n)\n\n\n\n\nSignals\n\u00b6\n\n\nIn this module, \nKeyDown\n and \nKeyUp\n Signals have the following functions:\n\nlocal\n \nShift\n \n=\n \nKeys\n.\nShift\n.\nKeyDown\n\n\nlocal\n \nE\n \n=\n \nKeys\n.\nE\n.\nKeyDown\n\n\n\nE\n:\nConnect\n(\nfunction\n()\n \n-- Connects a function\n\n    \nprint\n(\n\"E!\"\n)\n\n\nend\n)\n\n\n\nE\n:\nPress\n()\n \n-- Fires open connections\n\n\nE\n:\nFire\n()\n \n-- Same as Press()\n\n\nE\n:\nWait\n()\n \n-- Yields until event fires\n\n\n\n;(\nShift\n \n+\n \nE\n):\nConnect\n(\nfunction\n()\n \n-- You can add 2 Keys together to get a combo event!\n\n    \nprint\n(\n\"Shift + E!\"\n)\n\n    \n-- NOTE: Neither Shift nor E fire when (Shift + E) fires\n\n    \n-- If you want to fire one or both of them, do Shift:Press() or E:Press()\n\n\nend\n)\n\n\n\n\nOverhead\n\u00b6\n\n\nThis is an extremely light library. The tables within \nKeys\n are merely interface tables, and are not directly involved with calling connected Functions. The tables interface with a system that looks mostly like this:\n\nlocal\n \nKeyUps\n \n=\n \n{\n\n    \nQ\n \n=\n \nfunction\n()\n\n        \nprint\n(\n\"Q was let up\"\n)\n\n    \nend\n;\n\n\n    \nE\n \n=\n \nfunction\n()\n\n        \nprint\n(\n\"E was let up\"\n)\n\n    \nend\n\n\n}\n\n\n\nUserInputService\n.\nInputEnded\n:\nConnect\n(\nfunction\n(\nData\n,\n \nGuiInput\n)\n\n    \nif\n \nnot\n \nGuiInput\n \nand\n \nData\n.\nKeyCode\n \n~=\n \nEnum\n.\nKeyCode\n.\nUnknown\n \nthen\n\n        \nlocal\n \nFunction\n \n=\n \nKeyUps\n[\nData\n.\nKeyCode\n.\nName\n]\n\n        \nif\n \nFunction\n \nthen\n\n            \nFunction\n()\n\n        \nend\n\n    \nend\n\n\nend\n)",
            "title": "Keys"
        },
        {
            "location": "/Libraries/Input/Keys/#keys",
            "text": "A light-weight library for simplifying Key input.",
            "title": "Keys"
        },
        {
            "location": "/Libraries/Input/Keys/#api",
            "text": "",
            "title": "API"
        },
        {
            "location": "/Libraries/Input/Keys/#keys_1",
            "text": "The library returns a table  Keys . Within this table, Keys from Enum.KeyCode can be indexed. local   Resources   =   require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Resources\" ))  local   Keys   =   Resources : LoadLibrary ( \"Keys\" )  -- Each of these can be called with either a '.' or a ':', as it doesn't need 'self'  Keys : Pause ()   -- Disconnects this module's InputEnded and InputBegan connections to UserInputService  Keys : Resume ()   -- Reconnects what Pause disconnects  local   Q   =   Keys . Q   -- returns a Key Object",
            "title": "Keys"
        },
        {
            "location": "/Libraries/Input/Keys/#key",
            "text": "These table objects contain two custom Signals (technically, they are interfaces).  KeyDown  and  KeyUp  local   Q   =   Keys . Q   -- returns a Key Object  Q . KeyDown : Connect ( function () \n     print ( \"Q was pressed!\" )  end )  Q . KeyUp : Connect ( function () \n     print ( \"Q was let go!\" )  end )",
            "title": "Key"
        },
        {
            "location": "/Libraries/Input/Keys/#signals",
            "text": "In this module,  KeyDown  and  KeyUp  Signals have the following functions: local   Shift   =   Keys . Shift . KeyDown  local   E   =   Keys . E . KeyDown  E : Connect ( function ()   -- Connects a function \n     print ( \"E!\" )  end )  E : Press ()   -- Fires open connections  E : Fire ()   -- Same as Press()  E : Wait ()   -- Yields until event fires  ;( Shift   +   E ): Connect ( function ()   -- You can add 2 Keys together to get a combo event! \n     print ( \"Shift + E!\" ) \n     -- NOTE: Neither Shift nor E fire when (Shift + E) fires \n     -- If you want to fire one or both of them, do Shift:Press() or E:Press()  end )",
            "title": "Signals"
        },
        {
            "location": "/Libraries/Input/Keys/#overhead",
            "text": "This is an extremely light library. The tables within  Keys  are merely interface tables, and are not directly involved with calling connected Functions. The tables interface with a system that looks mostly like this: local   KeyUps   =   { \n     Q   =   function () \n         print ( \"Q was let up\" ) \n     end ; \n\n     E   =   function () \n         print ( \"E was let up\" ) \n     end  }  UserInputService . InputEnded : Connect ( function ( Data ,   GuiInput ) \n     if   not   GuiInput   and   Data . KeyCode   ~=   Enum . KeyCode . Unknown   then \n         local   Function   =   KeyUps [ Data . KeyCode . Name ] \n         if   Function   then \n             Function () \n         end \n     end  end )",
            "title": "Overhead"
        },
        {
            "location": "/Libraries/Interpolation/Bezier/",
            "text": "Bezier Module\n\u00b6\n\n\nUsed to create Bezier functions.\n\n\nAPI\n\u00b6\n\n\nlocal\n \nEasingFunc\n \n=\n \nBezier\n.\nnew\n(\n0.17\n,\n \n0.67\n,\n \n0.83\n,\n \n0.67\n)\n\n\n\nTest and generate Bezier curves here at \ncubic-bezier.com\n or at \ngreweb.me\n\nCredit: Math borrowed from \nhere",
            "title": "Bezier"
        },
        {
            "location": "/Libraries/Interpolation/Bezier/#bezier-module",
            "text": "Used to create Bezier functions.",
            "title": "Bezier Module"
        },
        {
            "location": "/Libraries/Interpolation/Bezier/#api",
            "text": "local   EasingFunc   =   Bezier . new ( 0.17 ,   0.67 ,   0.83 ,   0.67 )  \nTest and generate Bezier curves here at  cubic-bezier.com  or at  greweb.me \nCredit: Math borrowed from  here",
            "title": "API"
        },
        {
            "location": "/Libraries/Interpolation/Easing/",
            "text": "Easing Functions\n\u00b6\n\n\nThese are the available EasingFunctions:\nYou need to specify the directon of EasingFunctions that aren't \"Directionless\":\n\n\n\n\n\n\n\n\nDirectionless\n\n\nIn\n\n\nOut\n\n\nInOut\n\n\nOutIn\n\n\n\n\n\n\n\n\n\n\nLinear\n\n\nInQuad\n\n\nOutQuad\n\n\nInOutQuad\n\n\nOutInQuad\n\n\n\n\n\n\nSpring\n\n\nInCubic\n\n\nOutCubic\n\n\nInOutCubic\n\n\nOutInCubic\n\n\n\n\n\n\nSoftSpring\n\n\nInQuart\n\n\nOutQuart\n\n\nInOutQuart\n\n\nOutInQuart\n\n\n\n\n\n\nRevBack\n\n\nInQuint\n\n\nOutQuint\n\n\nInOutQuint\n\n\nOutInQuint\n\n\n\n\n\n\nRidiculousWiggle\n\n\nInSine\n\n\nOutSine\n\n\nInOutSine\n\n\nOutInSine\n\n\n\n\n\n\nSmooth\n\n\nInExpo\n\n\nOutExpo\n\n\nInOutExpo\n\n\nOutInExpo\n\n\n\n\n\n\nSmoother\n\n\nInCirc\n\n\nOutCirc\n\n\nInOutCirc\n\n\nOutInCirc\n\n\n\n\n\n\nAcceleration\n\n\nInElastic\n\n\nOutElastic\n\n\nInOutElastic\n\n\nOutInElastic\n\n\n\n\n\n\nDeceleration\n\n\nInBack\n\n\nOutBack\n\n\nInOutBack\n\n\nOutInBack\n\n\n\n\n\n\nSharp\n\n\nInBounce\n\n\nOutBounce\n\n\nInOutBounce\n\n\nOutInBounce\n\n\n\n\n\n\nStandard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you want to, you can access the EasingFunctions for use with other modules through either of the following:\n\n\nlocal\n \nEasing\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Easing\"\n)\n\n\n\n-- If you want an array of all Easing Enumerations\n\n\nlocal\n \nEnumerationItems\n \n=\n \nEnumeration\n.\nEasingFunction\n:\nGetEnumerationItems\n()\n\n\nfor\n \ni\n \n=\n \n1\n,\n \n#\nEnumerationItems\n \ndo\n\n    \nprint\n(\nEnumerationItems\n[\ni\n])\n\n\nend",
            "title": "Easing"
        },
        {
            "location": "/Libraries/Interpolation/Easing/#easing-functions",
            "text": "These are the available EasingFunctions:\nYou need to specify the directon of EasingFunctions that aren't \"Directionless\":     Directionless  In  Out  InOut  OutIn      Linear  InQuad  OutQuad  InOutQuad  OutInQuad    Spring  InCubic  OutCubic  InOutCubic  OutInCubic    SoftSpring  InQuart  OutQuart  InOutQuart  OutInQuart    RevBack  InQuint  OutQuint  InOutQuint  OutInQuint    RidiculousWiggle  InSine  OutSine  InOutSine  OutInSine    Smooth  InExpo  OutExpo  InOutExpo  OutInExpo    Smoother  InCirc  OutCirc  InOutCirc  OutInCirc    Acceleration  InElastic  OutElastic  InOutElastic  OutInElastic    Deceleration  InBack  OutBack  InOutBack  OutInBack    Sharp  InBounce  OutBounce  InOutBounce  OutInBounce    Standard         If you want to, you can access the EasingFunctions for use with other modules through either of the following:  local   Easing   =   Resources : LoadLibrary ( \"Easing\" )  -- If you want an array of all Easing Enumerations  local   EnumerationItems   =   Enumeration . EasingFunction : GetEnumerationItems ()  for   i   =   1 ,   # EnumerationItems   do \n     print ( EnumerationItems [ i ])  end",
            "title": "Easing Functions"
        },
        {
            "location": "/Libraries/Interpolation/Lerps/",
            "text": "Lerps\n\u00b6\n\n\nContains functions which take arguments \n(variant beginning, variant last, number alpha [0, 1])\n and returns a value in between \nbeginning\n and \nlast\n inclusive where \n0\n is \nbeginning\n and \n1\n is \nlast\n.\n\n\nContains CIELUV color lerping written by Fractality:",
            "title": "Lerps"
        },
        {
            "location": "/Libraries/Interpolation/Lerps/#lerps",
            "text": "Contains functions which take arguments  (variant beginning, variant last, number alpha [0, 1])  and returns a value in between  beginning  and  last  inclusive where  0  is  beginning  and  1  is  last .  Contains CIELUV color lerping written by Fractality:",
            "title": "Lerps"
        },
        {
            "location": "/Libraries/Interpolation/Tween/",
            "text": "Tween\n\u00b6\n\n\nRoStrap's premier Tween Module built for Roblox. Allows you to write interpolation code faster with a clear and simple API.\n\n\nDeclaration\n\u00b6\n\n\nFirst let's load the module:\n\nlocal\n \nReplicatedStorage\n \n=\n \ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n)\n\n\nlocal\n \nResources\n \n=\n \nrequire\n(\nReplicatedStorage\n:\nWaitForChild\n(\n\"Resources\"\n))\n\n\n\nlocal\n \nTween\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Tween\"\n)\n\n\nlocal\n \nEnumeration\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Enumeration\"\n)\n\n\n\nOnce you've loaded the Tween Module, there are two ways to create a Tween. You can either interpolate a property of an object, or create a custom Tween with a function you want called each frame.\n\n\nTween Properties\n\u00b6\n\n\nTween function for tweening any property.  Like GuiObject:TweenPosition but the first two arguments are Object and Property\n\n\nTween\n(\n\n    \nObject\n \nobject\n,\n \n-- or anything that holds the changing property\n\n    \nString\n \npropertyName\n,\n\n    \nVariant\n \nendValue\n,\n\n    \nEnumeration\n.\nEasingFunction\n \neasingFunction\n,\n\n    \nNumber\n \ntime\n,\n\n    \nbool\n \noverride\n \n=\n \nfalse\n,\n\n    \nfunction\n(\nTweenStatus\n)\n \ncallback\n \n=\n \nnil\n\n\n)\n\n\n\n-- Recommended standard\n\n\nlocal\n \nOutQuad\n \n=\n \nEnumeration\n.\nEasingFunction\n.\nOutQuad\n.\nValue\n\n\nlocal\n \nStandard\n \n=\n \nEnumeration\n.\nEasingFunction\n.\nStandard\n.\nValue\n\n\n\nTween\n(\nworkspace\n.\nPart\n,\n \n\"CFrame\"\n,\n \nCFrame\n.\nnew\n(\n10\n,\n \n10\n,\n \n10\n),\n \nOutQuad\n,\n \n2\n,\n \ntrue\n)\n\n\nTween\n(\nworkspace\n.\nPart\n,\n \n\"Transparency\"\n,\n \n1\n,\n \nStandard\n,\n \n2\n,\n \ntrue\n)\n\n\n\n\n\nLightweight Custom Tween\n\u00b6\n\n\nTweens created with \nTween.new\n will call Callback every tween frame, with EasingFunction interpolating from 0 to 1 over the allotted duration.\n\n\nTween\n.\nnew\n(\nnumber\n \nDuration\n,\n \nstring\n \nEasingFunctionName\n,\n \nfunction\n \nCallback\n)\n\n\n\nlocal\n \nDeceleration\n \n=\n \nEnumeration\n.\nEasingFunction\n.\nDeceleration\n.\nValue\n\n\n\nlocal\n \nnewTween\n \n=\n \nTween\n.\nnew\n(\n0.5\n,\n \nDeceleration\n,\n \nfunction\n(\nx\n)\n\n    \nprint\n(\n\"This will be called with each 'Frame' of this tween\"\n)\n\n\nend\n)\n\n\n\n\n\nTween Objects\n\u00b6\n\n\nThese are the functions and properties of the TweenObjects returned with each Tween creation.\n\n    \nTween\n \nObject\n\n\n        \nMethods\n:\n\n            \nTween\n:\nResume\n()\n\n\n//              Resumes a Tween that was Stop()ed\n\n            \nTween\n:\nStop\n()\n\n\n//              Stops a Tween\n\n            \nTween\n:\nWait\n()\n\n\n//              Yields until Tween finishes interpolating\n\n            \nTween\n:\nRestart\n()\n\n\n//              Makes the Tween go back to timeElapsed = 0\n\n\n        \nProperties\n:\n\n            \nboolean\n \nTween\n.\nRunning\n\n\n//              Whether the Tween is active",
            "title": "Tween"
        },
        {
            "location": "/Libraries/Interpolation/Tween/#tween",
            "text": "RoStrap's premier Tween Module built for Roblox. Allows you to write interpolation code faster with a clear and simple API.",
            "title": "Tween"
        },
        {
            "location": "/Libraries/Interpolation/Tween/#declaration",
            "text": "First let's load the module: local   ReplicatedStorage   =   game : GetService ( \"ReplicatedStorage\" )  local   Resources   =   require ( ReplicatedStorage : WaitForChild ( \"Resources\" ))  local   Tween   =   Resources : LoadLibrary ( \"Tween\" )  local   Enumeration   =   Resources : LoadLibrary ( \"Enumeration\" )  \nOnce you've loaded the Tween Module, there are two ways to create a Tween. You can either interpolate a property of an object, or create a custom Tween with a function you want called each frame.",
            "title": "Declaration"
        },
        {
            "location": "/Libraries/Interpolation/Tween/#tween-properties",
            "text": "Tween function for tweening any property.  Like GuiObject:TweenPosition but the first two arguments are Object and Property  Tween ( \n     Object   object ,   -- or anything that holds the changing property \n     String   propertyName , \n     Variant   endValue , \n     Enumeration . EasingFunction   easingFunction , \n     Number   time , \n     bool   override   =   false , \n     function ( TweenStatus )   callback   =   nil  )  -- Recommended standard  local   OutQuad   =   Enumeration . EasingFunction . OutQuad . Value  local   Standard   =   Enumeration . EasingFunction . Standard . Value  Tween ( workspace . Part ,   \"CFrame\" ,   CFrame . new ( 10 ,   10 ,   10 ),   OutQuad ,   2 ,   true )  Tween ( workspace . Part ,   \"Transparency\" ,   1 ,   Standard ,   2 ,   true )",
            "title": "Tween Properties"
        },
        {
            "location": "/Libraries/Interpolation/Tween/#lightweight-custom-tween",
            "text": "Tweens created with  Tween.new  will call Callback every tween frame, with EasingFunction interpolating from 0 to 1 over the allotted duration.  Tween . new ( number   Duration ,   string   EasingFunctionName ,   function   Callback )  local   Deceleration   =   Enumeration . EasingFunction . Deceleration . Value  local   newTween   =   Tween . new ( 0.5 ,   Deceleration ,   function ( x ) \n     print ( \"This will be called with each 'Frame' of this tween\" )  end )",
            "title": "Lightweight Custom Tween"
        },
        {
            "location": "/Libraries/Interpolation/Tween/#tween-objects",
            "text": "These are the functions and properties of the TweenObjects returned with each Tween creation.      Tween   Object \n\n         Methods : \n             Tween : Resume ()  //              Resumes a Tween that was Stop()ed \n             Tween : Stop ()  //              Stops a Tween \n             Tween : Wait ()  //              Yields until Tween finishes interpolating \n             Tween : Restart ()  //              Makes the Tween go back to timeElapsed = 0 \n\n         Properties : \n             boolean   Tween . Running  //              Whether the Tween is active",
            "title": "Tween Objects"
        },
        {
            "location": "/Libraries/Material/AsymmetricTransformation/",
            "text": "AsymmetricTransformation\n\u00b6\n\n\nTransform function for Paper\n\n\nAsymmetricTransformation(GuiObject Button, UDim2 EndSize)",
            "title": "AsymmetricTransformation"
        },
        {
            "location": "/Libraries/Material/AsymmetricTransformation/#asymmetrictransformation",
            "text": "Transform function for Paper  AsymmetricTransformation(GuiObject Button, UDim2 EndSize)",
            "title": "AsymmetricTransformation"
        },
        {
            "location": "/Libraries/Material/Button/",
            "text": "Button\n\u00b6\n\n\nMaterial Design Buttons!\n\n\nAPI\n\u00b6\n\n\nInstantiate a new button with \nuserdata Button.new(string BUTTON_TYPE, RbxObject Parent)\n. It returns a userdata that serves as a wrapper for the \nTextButton\n Object. Simply declare it and use it like you normally would!\n\n\nExample:\n\nlocal\n \nResources\n \n=\n \nrequire\n(\ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n):\nWaitForChild\n(\n\"Resources\"\n))\n\n\nlocal\n \nButton\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Button\"\n)\n\n\n\nlocal\n \nPlayers\n \n=\n \ngame\n:\nGetService\n(\n\"Players\"\n)\n\n\nlocal\n \nLocalPlayer\n \nrepeat\n \nLocalPlayer\n \n=\n \nPlayers\n.\nLocalPlayer\n \nuntil\n \nLocalPlayer\n \nor\n \nnot\n \nwait\n()\n\n\nlocal\n \nPlayerGui\n \nrepeat\n \nPlayerGui\n \n=\n \nLocalPlayer\n:\nFindFirstChildOfClass\n(\n\"PlayerGui\"\n)\n \nuntil\n \nPlayerGui\n \nor\n \nnot\n \nwait\n()\n\n\n\nlocal\n \nScreen\n \n=\n \nInstance\n.\nnew\n(\n\"ScreenGui\"\n,\n \nPlayerGui\n)\n\n\nlocal\n \nFrame\n \n=\n \nInstance\n.\nnew\n(\n\"Frame\"\n,\n \nScreen\n)\n\n\nFrame\n.\nBackgroundColor3\n \n=\n \nColor3\n.\nfromRGB\n(\n0\n,\n \n0\n,\n \n0\n)\n\n\nFrame\n.\nBorderSizePixel\n \n=\n \n0\n\n\nFrame\n.\nSize\n \n=\n \nUDim2\n.\nnew\n(\n1\n,\n \n0\n,\n \n1\n,\n \n0\n)\n\n\n\nlocal\n \nSubmit\n \n=\n \nButton\n.\nnew\n(\n\"Flat\"\n,\n \nFrame\n)\n \n-- Use \"Custom\" to remove the rounded corners\n\n\nSubmit\n.\nTextSize\n \n=\n \n18\n\n\nSubmit\n.\nTextColor3\n \n=\n \nColor3\n.\nfromRGB\n(\n255\n,\n \n255\n,\n \n255\n)\n\n\nSubmit\n.\nSize\n \n=\n \nUDim2\n.\nnew\n(\n0\n,\n \n82\n,\n \n0\n,\n \n36\n)\n\n\nSubmit\n.\nPosition\n \n=\n \nUDim2\n.\nnew\n(\n0\n,\n \n10\n,\n \n0\n,\n \n100\n)\n\n\nSubmit\n.\nFont\n \n=\n \nEnum\n.\nFont\n.\nSourceSansBold\n\n\nSubmit\n.\nText\n \n=\n \n\"SUBMIT\"\n\n\n\nSubmit\n.\nMouseButton1Click\n:\nConnect\n(\nfunction\n()\n\n    \nprint\n(\n\"MouseButton1Click\"\n)\n\n\nend\n)\n\n\n\nwait\n(\n1\n)\n\n\n\nSubmit\n:\nRipple\n()\n\n\n\nwait\n(\n1\n)\n\n\n\nFrame\n.\nBackgroundColor3\n \n=\n \nColor3\n.\nfromRGB\n(\n255\n,\n \n255\n,\n \n255\n)\n\n\nSubmit\n.\nTextColor3\n \n=\n \nColor3\n.\nfromRGB\n(\n0\n,\n \n0\n,\n \n0\n)\n\n\n\nwait\n(\n1\n)\n\n\n\nSubmit\n:\nDestroy\n()\n\n\n\nThere is also a \nRipple\n method which just plays a Ripple.\n\nSubmit\n:\nRipple\n()\n \n-- Ripples :D\n\n\n\n\nButton Types\n\u00b6\n\n\nThe three button types are \"Flat\", \"Custom\", and \"Raised\". The \"Raised\" type isn't perfect, as it is difficult to faithfully render in Roblox.\n\n\nFlat\n\u00b6\n\n\nA \nFlatButton\n has one descendant by default, called \nCorner\n. This is the \nImageLabel\n that overlays a 2dp corner image over your \nFlatButton\n. It's \nImageColor3\n property is automatically set to \nFlatButton.Parent.BackgroundColor3\n. Whenever you set the \nParent\n property, it will attempt to update to the aforementioned value. You can set it manually with the following:\n\nFlatButton\n.\nCorner\n.\nImageColor3\n \n=\n \nColor3\n.\nfromRGB\n(\n255\n,\n \n255\n,\n \n255\n)\n\n\n\n\nCustom\n\u00b6\n\n\nA \nCustomButton\n is exactly the same as a \nFlatButton\n, except its \nCorner\n object has its \nImageTransparency\n set to 0. Use this if you don't want visible corner overlays.\n\n\nRaised\n\u00b6\n\n\nFor when you want your buttons to lift.",
            "title": "Button"
        },
        {
            "location": "/Libraries/Material/Button/#button",
            "text": "Material Design Buttons!",
            "title": "Button"
        },
        {
            "location": "/Libraries/Material/Button/#api",
            "text": "Instantiate a new button with  userdata Button.new(string BUTTON_TYPE, RbxObject Parent) . It returns a userdata that serves as a wrapper for the  TextButton  Object. Simply declare it and use it like you normally would!  Example: local   Resources   =   require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Resources\" ))  local   Button   =   Resources : LoadLibrary ( \"Button\" )  local   Players   =   game : GetService ( \"Players\" )  local   LocalPlayer   repeat   LocalPlayer   =   Players . LocalPlayer   until   LocalPlayer   or   not   wait ()  local   PlayerGui   repeat   PlayerGui   =   LocalPlayer : FindFirstChildOfClass ( \"PlayerGui\" )   until   PlayerGui   or   not   wait ()  local   Screen   =   Instance . new ( \"ScreenGui\" ,   PlayerGui )  local   Frame   =   Instance . new ( \"Frame\" ,   Screen )  Frame . BackgroundColor3   =   Color3 . fromRGB ( 0 ,   0 ,   0 )  Frame . BorderSizePixel   =   0  Frame . Size   =   UDim2 . new ( 1 ,   0 ,   1 ,   0 )  local   Submit   =   Button . new ( \"Flat\" ,   Frame )   -- Use \"Custom\" to remove the rounded corners  Submit . TextSize   =   18  Submit . TextColor3   =   Color3 . fromRGB ( 255 ,   255 ,   255 )  Submit . Size   =   UDim2 . new ( 0 ,   82 ,   0 ,   36 )  Submit . Position   =   UDim2 . new ( 0 ,   10 ,   0 ,   100 )  Submit . Font   =   Enum . Font . SourceSansBold  Submit . Text   =   \"SUBMIT\"  Submit . MouseButton1Click : Connect ( function () \n     print ( \"MouseButton1Click\" )  end )  wait ( 1 )  Submit : Ripple ()  wait ( 1 )  Frame . BackgroundColor3   =   Color3 . fromRGB ( 255 ,   255 ,   255 )  Submit . TextColor3   =   Color3 . fromRGB ( 0 ,   0 ,   0 )  wait ( 1 )  Submit : Destroy ()  \nThere is also a  Ripple  method which just plays a Ripple. Submit : Ripple ()   -- Ripples :D",
            "title": "API"
        },
        {
            "location": "/Libraries/Material/Button/#button-types",
            "text": "The three button types are \"Flat\", \"Custom\", and \"Raised\". The \"Raised\" type isn't perfect, as it is difficult to faithfully render in Roblox.",
            "title": "Button Types"
        },
        {
            "location": "/Libraries/Material/Button/#flat",
            "text": "A  FlatButton  has one descendant by default, called  Corner . This is the  ImageLabel  that overlays a 2dp corner image over your  FlatButton . It's  ImageColor3  property is automatically set to  FlatButton.Parent.BackgroundColor3 . Whenever you set the  Parent  property, it will attempt to update to the aforementioned value. You can set it manually with the following: FlatButton . Corner . ImageColor3   =   Color3 . fromRGB ( 255 ,   255 ,   255 )",
            "title": "Flat"
        },
        {
            "location": "/Libraries/Material/Button/#custom",
            "text": "A  CustomButton  is exactly the same as a  FlatButton , except its  Corner  object has its  ImageTransparency  set to 0. Use this if you don't want visible corner overlays.",
            "title": "Custom"
        },
        {
            "location": "/Libraries/Material/Button/#raised",
            "text": "For when you want your buttons to lift.",
            "title": "Raised"
        },
        {
            "location": "/Libraries/Material/Colors/",
            "text": "Colors\n\u00b6\n\n\nColors taken from \nMaterial Design Color Palette\n, compiled via our \nColors Generator\n.\n\n\nThe \nColors\n table is structured much like the webpage:\n\nlocal\n \nColors\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Colors\"\n)\n\n\nlocal\n \nRed\n \n=\n \nColors\n.\nRed\n[\n500\n]\n \n-- Red 500: #F44336\n\n\nlocal\n \nDarkRed\n \n=\n \nColors\n.\nRed\n[\n900\n]\n \n-- Red 900: #B71C1C\n\n\n\nAccent colors have their own table within colors\n\nlocal\n \nPurpleAccent\n \n=\n \nColors\n.\nPurple\n.\nAccent\n[\n700\n]\n \n-- Purple A700 #AA00FF",
            "title": "Colors"
        },
        {
            "location": "/Libraries/Material/Colors/#colors",
            "text": "Colors taken from  Material Design Color Palette , compiled via our  Colors Generator .  The  Colors  table is structured much like the webpage: local   Colors   =   Resources : LoadLibrary ( \"Colors\" )  local   Red   =   Colors . Red [ 500 ]   -- Red 500: #F44336  local   DarkRed   =   Colors . Red [ 900 ]   -- Red 900: #B71C1C  \nAccent colors have their own table within colors local   PurpleAccent   =   Colors . Purple . Accent [ 700 ]   -- Purple A700 #AA00FF",
            "title": "Colors"
        },
        {
            "location": "/Libraries/Material/SelectionControl/",
            "text": "SelectionControl\n\u00b6\n\n\nMaterial design selection controls based on \nMaterial.io specifications\n. Will include Checkbox, Radio, and Switch elements. Currently, only Checkbox is available.\n\n\nCheckbox\n\u00b6\n\n\nCheckboxes can be instantiated like so:\n\nlocal\n \nResources\n \n=\n \nrequire\n(\ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n):\nWaitForChild\n(\n\"Resources\"\n))\n\n\nlocal\n \nSelectionControl\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"SelectionControl\"\n)\n\n\n\nlocal\n \nCheckbox\n \n=\n \nSelectionControl\n.\nnew\n(\n\"Checkbox\"\n)\n\n\n\nThis returns a custom userdata which can be interfaced with like a \nTextButton\n. It also has some added functionality:\n\n-- Properties\n\n\nCheckbox\n.\nState\n\n\n--  On is true, Off is false\n\n\nCheckbox\n.\nEnabledColor\n\n\n--  Should be a name of a Color from the `Colors` module\n\n\nCheckbox\n.\nEnabledColor3\n\n\n--  The true Color3 value of the EnabledColor\n\n\n\n-- Methods\n\n\nCheckbox\n:\nChangeState\n()\n\n\n--  Unlike simply setting the `State` property directly, this will animate and fire the StateChanged event\n\n\n\n-- Events\n\n\nCheckbox\n.\nStateChanged\n\n\n--  Fires after a player clicked to change the state or `:ChangeState()` was called\n\n\n\n\nExample:\n\nlocal\n \nTHEME_NAME\n \n=\n \n\"Light\"\n\n\n\nlocal\n \nResources\n \n=\n \nrequire\n(\ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n):\nWaitForChild\n(\n\"Resources\"\n))\n\n\nlocal\n \nColors\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Colors\"\n)\n\n\nlocal\n \nSelectionControl\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"SelectionControl\"\n)\n\n\n\nlocal\n \nPlayers\n \n=\n \ngame\n:\nGetService\n(\n\"Players\"\n)\n\n\nlocal\n \nLocalPlayer\n \nrepeat\n \nLocalPlayer\n \n=\n \nPlayers\n.\nLocalPlayer\n \nuntil\n \nLocalPlayer\n \nor\n \nnot\n \nwait\n()\n\n\nlocal\n \nPlayerGui\n \nrepeat\n \nPlayerGui\n \n=\n \nLocalPlayer\n:\nFindFirstChildOfClass\n(\n\"PlayerGui\"\n)\n \nuntil\n \nPlayerGui\n \nor\n \nnot\n \nwait\n()\n\n\n\nlocal\n \nScreen\n \n=\n \nInstance\n.\nnew\n(\n\"ScreenGui\"\n,\n \nPlayerGui\n)\n\n\nlocal\n \nFrame\n \n=\n \nInstance\n.\nnew\n(\n\"Frame\"\n,\n \nScreen\n)\n \n-- Color3.fromRGB(51, 51, 51)\n\n\nFrame\n.\nBackgroundColor3\n \n=\n \nTHEME_NAME\n \n==\n \n\"Dark\"\n \nand\n \nColor3\n.\nfromRGB\n(\n51\n,\n \n51\n,\n \n51\n)\n \nor\n \nTHEME_NAME\n \n==\n \n\"Light\"\n \nand\n \nColors\n.\nGrey\n[\n200\n]\n \nor\n \nerror\n(\n\"Invalid THEME_NAME\"\n)\n\n\nFrame\n.\nBorderSizePixel\n \n=\n \n0\n\n\nFrame\n.\nSize\n \n=\n \nUDim2\n.\nnew\n(\n1\n,\n \n0\n,\n \n1\n,\n \n0\n)\n\n\n\nlocal\n \nDisallowedColors\n \n=\n \n{\n\n    \nWhite\n \n=\n \ntrue\n;\n\n    \nBlack\n \n=\n \ntrue\n;\n\n    \nGrey\n \n=\n \ntrue\n;\n\n    \nBrown\n \n=\n \ntrue\n;\n\n    \nBlueGrey\n \n=\n \ntrue\n;\n\n    \nYellow\n \n=\n \ntrue\n;\n\n    \nAmber\n \n=\n \ntrue\n;\n\n    \nLime\n \n=\n \ntrue\n;\n\n\n}\n\n\n\nlocal\n \nfunction\n \nNextColor\n(\nCurrentColor\n)\n\n    \nrepeat\n \nCurrentColor\n \n=\n \nnext\n(\nColors\n,\n \nCurrentColor\n)\n\n    \nuntil\n \nCurrentColor\n \nand\n \nnot\n \nDisallowedColors\n[\nCurrentColor\n]\n\n    \nreturn\n \nCurrentColor\n\n\nend\n\n\n\nlocal\n \nCurrentColor\n \n=\n \nNextColor\n()\n\n\n\nlocal\n \nReceiveUpdates\n \n=\n \nSelectionControl\n.\nnew\n(\n\"Checkbox\"\n)\n\n\nReceiveUpdates\n.\nEnabledColor\n \n=\n \nCurrentColor\n\n\nReceiveUpdates\n.\nState\n \n=\n \nfalse\n\n\nReceiveUpdates\n.\nStateChanged\n:\nConnect\n(\nfunction\n(\nOn\n)\n\n    \nif\n \nnot\n \nOn\n \nthen\n\n        \nCurrentColor\n \n=\n \nNextColor\n(\nCurrentColor\n)\n\n        \nprint\n(\nCurrentColor\n)\n\n        \nReceiveUpdates\n.\nEnabledColor\n \n=\n \nCurrentColor\n\n    \nend\n\n\nend\n)\n\n\nReceiveUpdates\n.\nAnchorPoint\n \n=\n \nVector2\n.\nnew\n(\n0.5\n,\n \n0.5\n)\n\n\nReceiveUpdates\n.\nPosition\n \n=\n \nUDim2\n.\nnew\n(\n0.5\n,\n \n0\n,\n \n0.5\n,\n \n0\n)\n\n\nReceiveUpdates\n.\nTheme\n \n=\n \nTHEME_NAME\n\n\nReceiveUpdates\n.\nParent\n \n=\n \nFrame",
            "title": "SelectionControl"
        },
        {
            "location": "/Libraries/Material/SelectionControl/#selectioncontrol",
            "text": "Material design selection controls based on  Material.io specifications . Will include Checkbox, Radio, and Switch elements. Currently, only Checkbox is available.",
            "title": "SelectionControl"
        },
        {
            "location": "/Libraries/Material/SelectionControl/#checkbox",
            "text": "Checkboxes can be instantiated like so: local   Resources   =   require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Resources\" ))  local   SelectionControl   =   Resources : LoadLibrary ( \"SelectionControl\" )  local   Checkbox   =   SelectionControl . new ( \"Checkbox\" )  \nThis returns a custom userdata which can be interfaced with like a  TextButton . It also has some added functionality: -- Properties  Checkbox . State  --  On is true, Off is false  Checkbox . EnabledColor  --  Should be a name of a Color from the `Colors` module  Checkbox . EnabledColor3  --  The true Color3 value of the EnabledColor  -- Methods  Checkbox : ChangeState ()  --  Unlike simply setting the `State` property directly, this will animate and fire the StateChanged event  -- Events  Checkbox . StateChanged  --  Fires after a player clicked to change the state or `:ChangeState()` was called   Example: local   THEME_NAME   =   \"Light\"  local   Resources   =   require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Resources\" ))  local   Colors   =   Resources : LoadLibrary ( \"Colors\" )  local   SelectionControl   =   Resources : LoadLibrary ( \"SelectionControl\" )  local   Players   =   game : GetService ( \"Players\" )  local   LocalPlayer   repeat   LocalPlayer   =   Players . LocalPlayer   until   LocalPlayer   or   not   wait ()  local   PlayerGui   repeat   PlayerGui   =   LocalPlayer : FindFirstChildOfClass ( \"PlayerGui\" )   until   PlayerGui   or   not   wait ()  local   Screen   =   Instance . new ( \"ScreenGui\" ,   PlayerGui )  local   Frame   =   Instance . new ( \"Frame\" ,   Screen )   -- Color3.fromRGB(51, 51, 51)  Frame . BackgroundColor3   =   THEME_NAME   ==   \"Dark\"   and   Color3 . fromRGB ( 51 ,   51 ,   51 )   or   THEME_NAME   ==   \"Light\"   and   Colors . Grey [ 200 ]   or   error ( \"Invalid THEME_NAME\" )  Frame . BorderSizePixel   =   0  Frame . Size   =   UDim2 . new ( 1 ,   0 ,   1 ,   0 )  local   DisallowedColors   =   { \n     White   =   true ; \n     Black   =   true ; \n     Grey   =   true ; \n     Brown   =   true ; \n     BlueGrey   =   true ; \n     Yellow   =   true ; \n     Amber   =   true ; \n     Lime   =   true ;  }  local   function   NextColor ( CurrentColor ) \n     repeat   CurrentColor   =   next ( Colors ,   CurrentColor ) \n     until   CurrentColor   and   not   DisallowedColors [ CurrentColor ] \n     return   CurrentColor  end  local   CurrentColor   =   NextColor ()  local   ReceiveUpdates   =   SelectionControl . new ( \"Checkbox\" )  ReceiveUpdates . EnabledColor   =   CurrentColor  ReceiveUpdates . State   =   false  ReceiveUpdates . StateChanged : Connect ( function ( On ) \n     if   not   On   then \n         CurrentColor   =   NextColor ( CurrentColor ) \n         print ( CurrentColor ) \n         ReceiveUpdates . EnabledColor   =   CurrentColor \n     end  end )  ReceiveUpdates . AnchorPoint   =   Vector2 . new ( 0.5 ,   0.5 )  ReceiveUpdates . Position   =   UDim2 . new ( 0.5 ,   0 ,   0.5 ,   0 )  ReceiveUpdates . Theme   =   THEME_NAME  ReceiveUpdates . Parent   =   Frame",
            "title": "Checkbox"
        },
        {
            "location": "/Libraries/Material/Shadow/",
            "text": "WIP",
            "title": "Shadow"
        },
        {
            "location": "/Libraries/Material/Snackbar/",
            "text": "WIP",
            "title": "Snackbar"
        },
        {
            "location": "/Libraries/Math/Leveler/",
            "text": "Leveler\n\u00b6\n\n\nLevel and Experience class. WIP documentation:\n\n\ntable Leveler.new(number PointsToStartWith or 0)\n\nCreates a \nLeveler\n object with the following API\n\n\nLeveler:Award(Points)\n\nThe amount of points to add to \nTotal\n\n\nFields:\n\n\n\n\nTotal\n: Total Exp\n\n\nLvl\n: Current level\n\n\nExp\n: Current Exp within level\n\n\nNext\n: Total Exp required to advance from this level to the next level\n\n\nPercent\n: decimal progress to next level\n\n\n\n\nRun this little demo and you will learn everything you need to know.\n\nlocal\n \nrequire\n \n=\n \nrequire\n(\ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n):\nWaitForChild\n(\n\"Resources\"\n)).\nLoadLibrary\n\n\nlocal\n \nLeveler\n \n=\n \nrequire\n(\n\"Leveler\"\n)\n\n\n\nlocal\n \nKills\n \n=\n \nLeveler\n.\nnew\n()\n\n\ntable\n.\nforeach\n(\nKills\n,\n \nprint\n)\n\n\nprint\n()\n\n\n\nKills\n:\nAward\n()\n\n\ntable\n.\nforeach\n(\nKills\n,\n \nprint\n)\n\n\nprint\n()\n\n\n\nKills\n:\nAward\n(\n6\n)\n\n\ntable\n.\nforeach\n(\nKills\n,\n \nprint\n)",
            "title": "Leveler"
        },
        {
            "location": "/Libraries/Math/Leveler/#leveler",
            "text": "Level and Experience class. WIP documentation:  table Leveler.new(number PointsToStartWith or 0) \nCreates a  Leveler  object with the following API  Leveler:Award(Points) \nThe amount of points to add to  Total  Fields:   Total : Total Exp  Lvl : Current level  Exp : Current Exp within level  Next : Total Exp required to advance from this level to the next level  Percent : decimal progress to next level   Run this little demo and you will learn everything you need to know. local   require   =   require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Resources\" )). LoadLibrary  local   Leveler   =   require ( \"Leveler\" )  local   Kills   =   Leveler . new ()  table . foreach ( Kills ,   print )  print ()  Kills : Award ()  table . foreach ( Kills ,   print )  print ()  Kills : Award ( 6 )  table . foreach ( Kills ,   print )",
            "title": "Leveler"
        },
        {
            "location": "/Libraries/Math/Normal/",
            "text": "Normal\n\u00b6\n\n\nRandom numbers along a Normal curve\n\n\nnumber Normal(Average, StdDeviation)\n\nreturns: \nNormal curve [-1, 1] * StdDeviation + Average",
            "title": "Normal"
        },
        {
            "location": "/Libraries/Math/Normal/#normal",
            "text": "Random numbers along a Normal curve  number Normal(Average, StdDeviation) \nreturns:  Normal curve [-1, 1] * StdDeviation + Average",
            "title": "Normal"
        },
        {
            "location": "/Libraries/Math/WeightedProbabilityFunction/",
            "text": "WeightedProbabilityFunction\n\u00b6\n\n\nExample:\n\nlocal\n \nrequire\n \n=\n \nrequire\n(\ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n):\nWaitForChild\n(\n\"Resources\"\n)).\nLoadLibrary\n\n\nlocal\n \nWeightedProbabilityFunction\n \n=\n \nrequire\n(\n\"WeightedProbabilityFunction\"\n)\n\n\n\nlocal\n \nCoinToss\n \n=\n \nWeightedProbabilityFunction\n.\nnew\n \n{\n\n    \nHeads\n \n=\n \n0.5\n;\n\n    \nTails\n \n=\n \n0.5\n;\n\n\n}\n\n\n\nlocal\n \nDiceRoll\n \n=\n \nWeightedProbabilityFunction\n.\nnew\n \n{\n\n    \n-- These weights are relative to one another, so if they are all 1, they will each have a 1/6 chance\n\n    \n[\n1\n]\n \n=\n \n1\n;\n\n    \n[\n2\n]\n \n=\n \n1\n;\n\n    \n[\n3\n]\n \n=\n \n1\n;\n\n    \n[\n4\n]\n \n=\n \n1\n;\n\n    \n[\n5\n]\n \n=\n \n1\n;\n\n    \n[\n6\n]\n \n=\n \n1\n;\n\n\n}\n\n\n\nlocal\n \nDiceRollOrCoinToss\n \n=\n \nWeightedProbabilityFunction\n.\nnew\n \n{\n\n    \n-- 9/10 of the time, toss a coin\n\n    \n-- 1/10 of the time, roll a dice\n\n\n    \n[\nCoinToss\n]\n \n=\n \n9\n;\n\n    \n[\nDiceRoll\n]\n \n=\n \n1\n;\n\n\n}\n\n\n\nlocal\n \nt\n \n=\n \n{}\n\n\n\nfor\n \ni\n \n=\n \n1\n,\n \n10000\n \ndo\n\n    \nlocal\n \npick\n \n=\n \nDiceRollOrCoinToss\n()\n\n    \nt\n[\npick\n]\n \n=\n \n(\nt\n[\npick\n]\n \nor\n \n0\n)\n \n+\n \n1\n\n\nend\n\n\n\ntable\n.\nforeach\n(\nt\n,\n \nprint\n)",
            "title": "WeightedProbabilityFunction"
        },
        {
            "location": "/Libraries/Math/WeightedProbabilityFunction/#weightedprobabilityfunction",
            "text": "Example: local   require   =   require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Resources\" )). LoadLibrary  local   WeightedProbabilityFunction   =   require ( \"WeightedProbabilityFunction\" )  local   CoinToss   =   WeightedProbabilityFunction . new   { \n     Heads   =   0.5 ; \n     Tails   =   0.5 ;  }  local   DiceRoll   =   WeightedProbabilityFunction . new   { \n     -- These weights are relative to one another, so if they are all 1, they will each have a 1/6 chance \n     [ 1 ]   =   1 ; \n     [ 2 ]   =   1 ; \n     [ 3 ]   =   1 ; \n     [ 4 ]   =   1 ; \n     [ 5 ]   =   1 ; \n     [ 6 ]   =   1 ;  }  local   DiceRollOrCoinToss   =   WeightedProbabilityFunction . new   { \n     -- 9/10 of the time, toss a coin \n     -- 1/10 of the time, roll a dice \n\n     [ CoinToss ]   =   9 ; \n     [ DiceRoll ]   =   1 ;  }  local   t   =   {}  for   i   =   1 ,   10000   do \n     local   pick   =   DiceRollOrCoinToss () \n     t [ pick ]   =   ( t [ pick ]   or   0 )   +   1  end  table . foreach ( t ,   print )",
            "title": "WeightedProbabilityFunction"
        },
        {
            "location": "/Libraries/Ready/",
            "text": "RbxReady\n\u00b6\n\n\nA Library for yielding until an object's descendants have finished replicating. This is still imperfect, but it seems to be the best option if you want this kind of functionality.\n\n\nUsage\n\u00b6\n\n\nExample code:\n\n\nlocal\n \nReady\n \n=\n \nrequire\n(\nscript\n.\nReady\n)\n\n\n\nReady\n:\nWait\n(\nworkspace\n,\n \n10\n)\n\n\n\nReady\n:\nConnect\n(\nworkspace\n,\n \nfunction\n(\nLastToLoad\n)\n\n  \nprint\n(\n\"Workspace has been fully loaded - the last instance to load was\"\n,\n \nLastToLoad\n)\n\n\nend\n)\n\n\n\n\n\nThere is a single config variable in the module called \nTIMEOUT\n. This is the default number of seconds the script will wait where no descendants have been added to deem the object loaded.\n\n\nThe timeout value that gets used is essentially the minimum amount of time possible for an object to be fully loaded. This means that if the timeout is set to 1 (second), it will always take at least 1 second for an object to load.\n\n\nAPI\n\u00b6\n\n\nvoid\n Ready:Wait(\ninstance\n Object [, \nnumber\n Timeout])\n\u00b6\n\n\nRepeatedly calls \nwait()\n until the timeout has been reached and no descendants of the \nObject\n were added in that time.\n\n\nRBXScriptConnection\n Ready:Connect(\ninstance\n Object, \nfunction\n Callback [, \nnumber\n Timeout])\n\u00b6\n\n\nCompletes the timeout after every time a descendant of \nObject\n was added, then calls \nCallback\n if no other descendants had been added in the wait time. Returns a \nRBXScriptConnection\n which can be disconnected at any time, and is disconnected after the object has loaded.\n\n\nThe \nCallback\n function may take one argument; this being the last descendant that was added. Will be \nnil\n if no descendants were added.",
            "title": "Ready"
        },
        {
            "location": "/Libraries/Ready/#rbxready",
            "text": "A Library for yielding until an object's descendants have finished replicating. This is still imperfect, but it seems to be the best option if you want this kind of functionality.",
            "title": "RbxReady"
        },
        {
            "location": "/Libraries/Ready/#usage",
            "text": "Example code:  local   Ready   =   require ( script . Ready )  Ready : Wait ( workspace ,   10 )  Ready : Connect ( workspace ,   function ( LastToLoad ) \n   print ( \"Workspace has been fully loaded - the last instance to load was\" ,   LastToLoad )  end )   There is a single config variable in the module called  TIMEOUT . This is the default number of seconds the script will wait where no descendants have been added to deem the object loaded.  The timeout value that gets used is essentially the minimum amount of time possible for an object to be fully loaded. This means that if the timeout is set to 1 (second), it will always take at least 1 second for an object to load.",
            "title": "Usage"
        },
        {
            "location": "/Libraries/Ready/#api",
            "text": "",
            "title": "API"
        },
        {
            "location": "/Libraries/Ready/#void-readywaitinstance-object-number-timeout",
            "text": "Repeatedly calls  wait()  until the timeout has been reached and no descendants of the  Object  were added in that time.",
            "title": "void Ready:Wait(instance Object [, number Timeout])"
        },
        {
            "location": "/Libraries/Ready/#rbxscriptconnection-readyconnectinstance-object-function-callback-number-timeout",
            "text": "Completes the timeout after every time a descendant of  Object  was added, then calls  Callback  if no other descendants had been added in the wait time. Returns a  RBXScriptConnection  which can be disconnected at any time, and is disconnected after the object has loaded.  The  Callback  function may take one argument; this being the last descendant that was added. Will be  nil  if no descendants were added.",
            "title": "RBXScriptConnection Ready:Connect(instance Object, function Callback [, number Timeout])"
        },
        {
            "location": "/Libraries/Rbx_CustomFont/",
            "text": "Rbx_CustomFont\n\u00b6\n\n\nCustom font system for Roblox\n\u00b6\n\n\nRoblox build available here\n, bundled with the Roboto font with full ASCII charset excluding control characters.\n\n\nThis is a module built for Roblox studio to allow the usage of any OpenType (.otf) or TrueType (.ttf) font in Roblox by converting them into spritesheets and then wrapping normal GUI text objects so they work with the spiresheets.\n\n\nThis allows you to greatly expand your UI design options.\n\n\n\n\nIf you are interested in using Rbx_CustomFont in you game(s) then please view the \nAPI page.\n\n\nI have included a few fonts that come with the module, but if you would like to create your own font you are going to need the latest \n.NET Framework\n (sorry OSX users!). On that note if you have a mac and there is enough support (please send me a message if you are interested!), I may look into attempting to create a python version of the C# I have currently or I'll look into Mono. Otherwise, if you can run the .NET framework then you can read more about setting up your own font on the \nsetting up you own font wiki page.\n\n\nLicense\n\u00b6\n\n\nThis project uses \nSharpfont\n which is licensed under the MIT license.\n\n\nCopyright (c) 2012-2016 Robert Rouhani <robert.rouhani@gmail.com>\n\nSharpFont based on Tao.FreeType, Copyright (c) 2003-2007 Tao Framework Team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\nThis project also uses FreeType (which is needed for sharpfont to run).\nIt is redistributed under the FreeType License (FTL).\n\n\nPortions of this software are copyright (c) 2016 The FreeType Project\n(www.freetype.org). All rights reserved.\n\n\n\n\nFinally, the project itself is licensed under the MIT license which can be read \nhere.\n\n\nContributors\n\u00b6\n\n\nOriginal project by \nEgoMoose\n. Now maintained by \nGskartwii\n.\n\n\nAdarkTheCoder\n made the GUI or whatever.",
            "title": "Rbx_CustomFont"
        },
        {
            "location": "/Libraries/Rbx_CustomFont/#rbx_customfont",
            "text": "",
            "title": "Rbx_CustomFont"
        },
        {
            "location": "/Libraries/Rbx_CustomFont/#custom-font-system-for-roblox",
            "text": "Roblox build available here , bundled with the Roboto font with full ASCII charset excluding control characters.  This is a module built for Roblox studio to allow the usage of any OpenType (.otf) or TrueType (.ttf) font in Roblox by converting them into spritesheets and then wrapping normal GUI text objects so they work with the spiresheets.  This allows you to greatly expand your UI design options.   If you are interested in using Rbx_CustomFont in you game(s) then please view the  API page.  I have included a few fonts that come with the module, but if you would like to create your own font you are going to need the latest  .NET Framework  (sorry OSX users!). On that note if you have a mac and there is enough support (please send me a message if you are interested!), I may look into attempting to create a python version of the C# I have currently or I'll look into Mono. Otherwise, if you can run the .NET framework then you can read more about setting up your own font on the  setting up you own font wiki page.",
            "title": "Custom font system for Roblox"
        },
        {
            "location": "/Libraries/Rbx_CustomFont/#license",
            "text": "This project uses  Sharpfont  which is licensed under the MIT license.  Copyright (c) 2012-2016 Robert Rouhani <robert.rouhani@gmail.com>\n\nSharpFont based on Tao.FreeType, Copyright (c) 2003-2007 Tao Framework Team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.  This project also uses FreeType (which is needed for sharpfont to run).\nIt is redistributed under the FreeType License (FTL).  Portions of this software are copyright (c) 2016 The FreeType Project\n(www.freetype.org). All rights reserved.  Finally, the project itself is licensed under the MIT license which can be read  here.",
            "title": "License"
        },
        {
            "location": "/Libraries/Rbx_CustomFont/#contributors",
            "text": "Original project by  EgoMoose . Now maintained by  Gskartwii .  AdarkTheCoder  made the GUI or whatever.",
            "title": "Contributors"
        },
        {
            "location": "/Libraries/Sentry/",
            "text": "Sentry\n\u00b6\n\n\n\n\nGetting started\n\u00b6\n\n\nSign up for \nSentry\n to get started.\n\n\nNavigate to the \nProjects\n tab on the left-hand side.\n\n\n\n\nIn the top right, navigate to \"Add new...\" and select \"Project\"\n\n\n\n\nDon't select a project or framework, since this Library isn't officially supported by Sentry (but don't worry, \nit is still officially supported by RoStrap\n). Give your project a name and create project!\n\n\n\n\n\n\nNow you need to find your DSN. You will hopefully be shown the following screen, but if not you can always find these in the \"Settings\" tab.\n\n\n\n\nYou will need to locate a DSN that looks like this:\n\n\n\n\nNext, install this library using \nthe RoStrap plugin\n, and navigate to the Server-side Sentry library.\n\n\n\n\nUnder the configuration, modify the \nDSN\n variable to your DSN\n\n\n\n\nNow you have a working Sentry library!\n\n\nAPI\n\u00b6\n\n\nThe API is the same for both the client and the server.\n\n\nlocal\n \nSentry\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Sentry\"\n)\n\n\nlocal\n \nEnumeration\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Enumeration\"\n)\n \n-- Optional\n\n\n\nSentry\n:\nPost\n(\nstring\n \nMessage\n \n[,\n \nstring\n \nTraceback\n,\n \n<\nEnum\n,\n \nEnumeration\n>\n \nMessageType\n])\n\n\n-- Traceback defaults to debug.traceback()\n\n\n-- MessageType defaults to \"Error\"\n\n\n-- MessageType accepts any of the following Enumerations (or their corresponding numbers or strings)\n\n\n\n-- 0: Enumeration.IssueType.Debug\n\n\n-- 1: Enumeration.IssueType.Info\n\n\n-- 2: Enumeration.IssueType.Warning\n\n\n-- 3: Enumeration.IssueType.Error\n\n\n-- 4: Enumeration.IssueType.Fatal\n\n\n\n-- MessageType also accepts Roblox's MessageType Enums (but NOT their numbers or strings)\n\n\n-- Enum.MessageType.MessageError\n\n\n-- Enum.MessageType.MessageInfo\n\n\n-- Enum.MessageType.MessageOutput\n\n\n-- Enum.MessageType.MessageWarning\n\n\n\n\n\nIt is intended to be easily compatible with the \nTry\n library\n\n\nlocal\n \nTry\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Try\"\n)\n\n\nlocal\n \nSentry\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Sentry\"\n)\n\n\n\nTry\n(\nfunction\n(\nx\n)\n \nerror\n(\n\"test client error \"\n \n..\n \nx\n)\n \nend\n,\n \n\"1\"\n)\n\n    \n:\nCatch\n(\nSentry\n.\nPost\n)\n\n\n\n\n\nHere are your free Sentry rate limits:\n\n\n\n\nEnjoy!",
            "title": "Sentry"
        },
        {
            "location": "/Libraries/Sentry/#sentry",
            "text": "",
            "title": "Sentry"
        },
        {
            "location": "/Libraries/Sentry/#getting-started",
            "text": "Sign up for  Sentry  to get started.  Navigate to the  Projects  tab on the left-hand side.   In the top right, navigate to \"Add new...\" and select \"Project\"   Don't select a project or framework, since this Library isn't officially supported by Sentry (but don't worry,  it is still officially supported by RoStrap ). Give your project a name and create project!    Now you need to find your DSN. You will hopefully be shown the following screen, but if not you can always find these in the \"Settings\" tab.   You will need to locate a DSN that looks like this:   Next, install this library using  the RoStrap plugin , and navigate to the Server-side Sentry library.   Under the configuration, modify the  DSN  variable to your DSN   Now you have a working Sentry library!",
            "title": "Getting started"
        },
        {
            "location": "/Libraries/Sentry/#api",
            "text": "The API is the same for both the client and the server.  local   Sentry   =   Resources : LoadLibrary ( \"Sentry\" )  local   Enumeration   =   Resources : LoadLibrary ( \"Enumeration\" )   -- Optional  Sentry : Post ( string   Message   [,   string   Traceback ,   < Enum ,   Enumeration >   MessageType ])  -- Traceback defaults to debug.traceback()  -- MessageType defaults to \"Error\"  -- MessageType accepts any of the following Enumerations (or their corresponding numbers or strings)  -- 0: Enumeration.IssueType.Debug  -- 1: Enumeration.IssueType.Info  -- 2: Enumeration.IssueType.Warning  -- 3: Enumeration.IssueType.Error  -- 4: Enumeration.IssueType.Fatal  -- MessageType also accepts Roblox's MessageType Enums (but NOT their numbers or strings)  -- Enum.MessageType.MessageError  -- Enum.MessageType.MessageInfo  -- Enum.MessageType.MessageOutput  -- Enum.MessageType.MessageWarning   It is intended to be easily compatible with the  Try  library  local   Try   =   Resources : LoadLibrary ( \"Try\" )  local   Sentry   =   Resources : LoadLibrary ( \"Sentry\" )  Try ( function ( x )   error ( \"test client error \"   ..   x )   end ,   \"1\" ) \n     : Catch ( Sentry . Post )   Here are your free Sentry rate limits:   Enjoy!",
            "title": "API"
        },
        {
            "location": "/Libraries/Time/Date/",
            "text": "Date\n\u00b6\n\n\nTime and Date formatter mimicking the vanilla \nos.date\n function.\n\n\nlocal\n \nDate\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Date\"\n)\n\n\n\n\n\nDemo:\n\n\n-- ISO 8601:\n\n\nprint\n(\nDate\n(\n\"%FT%T\"\n))\n              \n-- 2020-01-01T01:03:05\n\n\nprint\n(\nDate\n(\n\"%Y-%m-%dT%H:%M:%S\"\n))\n  \n-- 2020-01-01T01:03:05\n\n\nprint\n(\nDate\n(\n\"%FT%T%#z\"\n))\n           \n-- 2020-01-01T01:03:05-05:00\n\n\n\n-- Time:\n\n\nprint\n(\nDate\n(\n\"%T\"\n))\n \n-- 08:37:43\n\n\n\n-- Date:\n\n\nprint\n(\nDate\n(\n\"%D\"\n))\n \n-- 01/12/20\n\n\n\n\n\nDate\n functions just like the vanilla Lua \nos.date\n function, except padding can be toggled by inserting a '#' like so:\n\n\nprint\n(\nDate\n(\n\"%#x\"\n,\n \nos.time\n()))\n\n\n\n\n\nString reference:\n\n\nThe following patterns will be replaced by their tags below:\n%c = \"%a %b %e %X %Y\"\n%D = \"%m/%d/%y\"\n%F = \"%Y-%m-%d\"\n%n = \"\\n\"\n%R = \"%H:%M\"\n%r = \"%I:%M:%S %p\"\n%T = \"%H:%M:%S\"\n%t = \"\\t\"\n%v = \"%e-%b-%Y\"\n%X = \"%T\"\n%x = \"%D\"\n\n%#c = \"%#x, %#X\"\n%#r = \"%#I:%M:%S %#p\"\n%#T = \"%#H:%M:%S\"\n%#X = \"%#T\"\n%#x = \"%A, %B %#d, %#Y\"\n\nThe following tags will be replaced as follows:\n%% = the character `%\u00b4\n%a = abbreviated weekday name (e.g., Wed)\n%A = full weekday name (e.g., Wednesday)\n%b = abbreviated month name (e.g., Sep)\n%B = full month name (e.g., September)\n%C = century: (year / 100) (padded)\n%d = day of the month (16) [01-31]\n%e = day of month as decimal number [ 1, 31]\n%g = Same year as in %G, but as a decimal number without century [00, 99]\n%G = a 4-digit year as a decimal number with century\n%H = hour, using a 24-hour clock (23) [00-23]\n%I = hour, using a 12-hour clock (11) [01-12]\n%j = day of year [001-366] (March 1st is treated as day 0 of year)\n%k = Hour in 24-hour format [ 0, 23]\n%l = Hour in 12-hour format [ 1, 12]\n%m = month (09) [01, 12]\n%M = minute (48) [00, 59]\n%p = either \"am\" or \"pm\" ('#' makes it uppercase)\n%s = Day of year suffix: e.g. 12th, 31st, 22nd\n%S = Second as decimal number [00, 59]\n%u = ISO 8601 weekday as number with Monday as 1 [1, 7]\n%U = Week of year, Sunday Based [00, 53]\n%V = week number of year (Monday as beginning of week) [01, 53]\n%w = weekday (3) [0-6 = Sunday-Saturday]\n%W = Week of year with Monday as first day of week [0, 53]\n%y = two-digit year (98) [00, 99]\n%Y = full year (1998)\n%z = Time zone offset from UTC in the form [+-]%02Hours%02Minutes, e.g. +0500\n\n\n\n\nExample:\n\n\nprint\n(\nDate\n(\n\"It is currently %#r\"\n))\n\n\n--> It is currently 1:41:20 am",
            "title": "Date"
        },
        {
            "location": "/Libraries/Time/Date/#date",
            "text": "Time and Date formatter mimicking the vanilla  os.date  function.  local   Date   =   Resources : LoadLibrary ( \"Date\" )   Demo:  -- ISO 8601:  print ( Date ( \"%FT%T\" ))                -- 2020-01-01T01:03:05  print ( Date ( \"%Y-%m-%dT%H:%M:%S\" ))    -- 2020-01-01T01:03:05  print ( Date ( \"%FT%T%#z\" ))             -- 2020-01-01T01:03:05-05:00  -- Time:  print ( Date ( \"%T\" ))   -- 08:37:43  -- Date:  print ( Date ( \"%D\" ))   -- 01/12/20   Date  functions just like the vanilla Lua  os.date  function, except padding can be toggled by inserting a '#' like so:  print ( Date ( \"%#x\" ,   os.time ()))   String reference:  The following patterns will be replaced by their tags below:\n%c = \"%a %b %e %X %Y\"\n%D = \"%m/%d/%y\"\n%F = \"%Y-%m-%d\"\n%n = \"\\n\"\n%R = \"%H:%M\"\n%r = \"%I:%M:%S %p\"\n%T = \"%H:%M:%S\"\n%t = \"\\t\"\n%v = \"%e-%b-%Y\"\n%X = \"%T\"\n%x = \"%D\"\n\n%#c = \"%#x, %#X\"\n%#r = \"%#I:%M:%S %#p\"\n%#T = \"%#H:%M:%S\"\n%#X = \"%#T\"\n%#x = \"%A, %B %#d, %#Y\"\n\nThe following tags will be replaced as follows:\n%% = the character `%\u00b4\n%a = abbreviated weekday name (e.g., Wed)\n%A = full weekday name (e.g., Wednesday)\n%b = abbreviated month name (e.g., Sep)\n%B = full month name (e.g., September)\n%C = century: (year / 100) (padded)\n%d = day of the month (16) [01-31]\n%e = day of month as decimal number [ 1, 31]\n%g = Same year as in %G, but as a decimal number without century [00, 99]\n%G = a 4-digit year as a decimal number with century\n%H = hour, using a 24-hour clock (23) [00-23]\n%I = hour, using a 12-hour clock (11) [01-12]\n%j = day of year [001-366] (March 1st is treated as day 0 of year)\n%k = Hour in 24-hour format [ 0, 23]\n%l = Hour in 12-hour format [ 1, 12]\n%m = month (09) [01, 12]\n%M = minute (48) [00, 59]\n%p = either \"am\" or \"pm\" ('#' makes it uppercase)\n%s = Day of year suffix: e.g. 12th, 31st, 22nd\n%S = Second as decimal number [00, 59]\n%u = ISO 8601 weekday as number with Monday as 1 [1, 7]\n%U = Week of year, Sunday Based [00, 53]\n%V = week number of year (Monday as beginning of week) [01, 53]\n%w = weekday (3) [0-6 = Sunday-Saturday]\n%W = Week of year with Monday as first day of week [0, 53]\n%y = two-digit year (98) [00, 99]\n%Y = full year (1998)\n%z = Time zone offset from UTC in the form [+-]%02Hours%02Minutes, e.g. +0500  Example:  print ( Date ( \"It is currently %#r\" ))  --> It is currently 1:41:20 am",
            "title": "Date"
        },
        {
            "location": "/Libraries/Time/SyncedPoller/",
            "text": "SyncedPoller\n\u00b6\n\n\nPolling synced to \nos.time()\n\n\nlocal\n \nResources\n \n=\n \nrequire\n(\ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n):\nWaitForChild\n(\n\"Resources\"\n))\n\n\nlocal\n \nSyncedPoller\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"SyncedPoller\"\n)\n\n\n\n-- SyncedPoller.new(number Interval, function Func)\n\n\nSyncedPoller\n.\nnew\n(\n10\n,\n \nprint\n)\n\n\n\n\n\nCalls a function every \nInterval\n seconds, whenever \n(os.time() % Iterval == 0)\n. Functions are called with the current \nos.time()\n (with \ntick()\n precision).",
            "title": "SyncedPoller"
        },
        {
            "location": "/Libraries/Time/SyncedPoller/#syncedpoller",
            "text": "Polling synced to  os.time()  local   Resources   =   require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"Resources\" ))  local   SyncedPoller   =   Resources : LoadLibrary ( \"SyncedPoller\" )  -- SyncedPoller.new(number Interval, function Func)  SyncedPoller . new ( 10 ,   print )   Calls a function every  Interval  seconds, whenever  (os.time() % Iterval == 0) . Functions are called with the current  os.time()  (with  tick()  precision).",
            "title": "SyncedPoller"
        },
        {
            "location": "/Libraries/Try/",
            "text": "Try\n\u00b6\n\n\nAn asynchronous pcall-wrapper library for controlling the flow of error-prone, interdependent functions.\n\n\nHow to use\n\u00b6\n\n\nUpon requiring the Library, it returns a function called Try:\n\n-- Without RoStrap\n\n\nlocal\n \nTry\n \n=\n \nrequire\n(\nTryLibrary\n)\n\n\n\n\n-- With RoStrap\n\n\nlocal\n \nResources\n \n=\n \nrequire\n(\nReplicatedStorage\n:\nWaitForChild\n(\n\"Resources\"\n))\n\n\n\nlocal\n \nTry\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Try\"\n)\n\n\n\n\nAPI\n\u00b6\n\n\nAttempt Try(Function, ...)\n\n\nTry\n calls \npcall(Function, ...)\n \non a separate thread\n, and returns a table Object called an \nAttempt\n.\n\n\nAttempt\n\u00b6\n\n\nAttempt :Then(Callback)\n\n\nThis method takes a callback of the form \n<function, callable table> Callback(...)\n, and pcalls it \nif the previous pcall didn't error\n, with \n...\n being that which was returned by that \npcall\n. This also returns the attempt, for further chaining.\n\n\nlocal\n \nHttpService\n \n=\n \ngame\n:\nGetService\n(\n'HttpService'\n)\n\n\n\nTry\n(\nwait\n,\n \n0.1\n)\n\n\n    \n-- Try hashing the time\n\n    \n:\nThen\n(\nfunction\n \n(\nDelta\n,\n \nElapsedTime\n)\n\n        \nreturn\n \nHttpService\n:\nGetAsync\n(\n'http://md5.jsontest.com/?text='\n \n..\n \nDelta\n)\n\n    \nend\n)\n\n\n    \n-- Try decoding the response\n\n    \n:\nThen\n(\nfunction\n \n(\nRawResponse\n)\n\n        \nreturn\n \nHttpService\n:\nJSONDecode\n(\nRawResponse\n)\n\n    \nend\n)\n\n\n    \n-- Print the decoded response data\n\n    \n:\nThen\n(\nfunction\n \n(\nResponse\n)\n\n        \nprint\n(\n'Input:'\n,\n \nResponse\n.\noriginal\n,\n \n'\n\\n\nMD5:'\n,\n \nResponse\n.\nmd5\n)\n\n    \nend\n)\n\n\n\n\n\nAttempt :Catch([string Patterns...], Callback)\n\n\nThis method takes a callback of the form \nVariant Callback(string Error, string Stack, Attempt FailedAttempt)\n, and pcalls it \nif the previous pcall had an error\n. Errors can be optionally filtered by providing a list of \npatterns which the error should match\n, otherwise all errors are caught by the function. Once an attempt's error is caught, it will not be caught by the next chained \n:Catch\n method, unless \nCallback\n itself has an error. The attempt is then returned for chaining.\n\n\nIf the first returned value from the attempt is an \nAttempt\n, it will be executed and the method will process its errors.\n\n\nlocal\n \nHttpService\n \n=\n \ngame\n:\nGetService\n(\n'HttpService'\n)\n\n\n\nTry\n(\nHttpService\n.\nGetAsync\n,\n \nHttpService\n,\n \n'http://httpstat.us/404'\n)\n\n    \n:\nThen\n(\nfunction\n \n(\nData\n)\n\n        \nprint\n(\n'Found'\n,\n \nData\n)\n\n    \nend\n)\n\n\n    \n-- Catch when the URL doesn't exist\n\n    \n:\nCatch\n(\n'HTTP 404'\n,\n \nfunction\n \n(\nError\n,\n \nStack\n,\n \nAttempt\n)\n\n        \nwarn\n(\n'Not found, error:'\n,\n \nError\n)\n\n    \nend\n)\n\n\n    \n-- Catch any other error\n\n    \n:\nCatch\n(\nfunction\n \n(\nError\n,\n \nStack\n,\n \nAttempt\n)\n\n        \nwarn\n(\n'Unknown error:'\n,\n \nError\n)\n\n    \nend\n)\n\n\n\n\n\nhttpstat.us\n is a good way to test Http request errors.\n\n\nAttempt :Retry()\n\n\nThis method can only be called within a \nCatch\n callback. It retries the last function called in the chain before the error (with the same old arguments). \nAttempt.RetryCount\n is incremented each time the attempt is retried, and is reset after a \nRetry\n \npcall\n doesn't error.\n\n\nYou can use this method to retry a sequence of interdependent function calls that fail, and even limit the number of, or space out, retries. For example:\n\n\nlocal\n \nHttpService\n \n=\n \ngame\n:\nGetService\n(\n'HttpService'\n)\n\n\n\nTry\n(\nHttpService\n.\nGetAsync\n,\n \nHttpService\n,\n \n'http://httpstat.us/503'\n)\n\n    \n:\nThen\n(\nfunction\n \n(\nData\n)\n\n        \nprint\n(\n'Found'\n,\n \nData\n)\n\n    \nend\n)\n\n\n    \n-- Catch when the server is having issues and retry\n\n    \n:\nCatch\n(\n'HTTP 503'\n,\n \n'Timeout was reached'\n,\n \nfunction\n \n(\nError\n,\n \nStack\n,\n \nAttempt\n)\n\n\n        \n-- Limit the number of retries to 3\n\n        \nif\n \nAttempt\n.\nRetryCount\n \n<\n \n3\n \nthen\n\n\n            \n-- Space out each retry\n\n            \nlocal\n \nBackoffTime\n \n=\n \nAttempt\n.\nRetryCount\n \n*\n \n3\n \n+\n \n3\n\n            \nwarn\n(\n'Retrying in'\n,\n \nBackoffTime\n,\n \n'seconds...'\n)\n\n            \nwait\n(\nBackoffTime\n)\n\n\n            \n-- Retry the attempt\n\n            \nreturn\n \nAttempt\n:\nRetry\n()\n\n\n        \n-- Give up if retry limit reached\n\n        \nelse\n\n            \nwarn\n(\n'Failed'\n)\n\n        \nend\n\n\n    \nend\n)\n\n\n    \n-- Catch any other errors\n\n    \n:\nCatch\n(\nfunction\n \n(\nError\n,\n \nStack\n,\n \nAttempt\n)\n\n        \nwarn\n(\n'Unknown error:'\n,\n \nError\n)\n\n    \nend\n)\n\n\n\n\n\nAttempt :Wait()\n\n\nThis method yields until all of the pcalls before it have finished running.\n\n\nTry\n(\nwait\n,\n \n0.5\n)\n\n    \n:\nThen\n(\nwait\n)\n\n    \n:\nWait\n()\n\n\nprint\n(\n\"Hello!\"\n)\n \n-- Runs after all of the threads finish\n\n\n\n\n\nA \n:Wait()\n can go anywhere in the Chain:\n\n\nlocal\n \nAttempt\n \n=\n \nTry\n(\nwait\n,\n \n2\n)\n\n\n\nprint\n(\n\"Hey!\"\n)\n \n-- This runs immediately after Try is called on a separate thread\n\n\n\nAttempt\n\n    \n:\nWait\n()\n \n-- Wait until this Attempt's thread finishes yielding\n\n    \n:\nThen\n(\nfunction\n(...)\n \n-- This is still on a separate thread\n\n        \nwait\n(\n1\n)\n\n        \nprint\n(\n\"This was returned by wait(2)\"\n,\n \n...)\n\n    \nend\n)\n\n\nprint\n(\n\"The Attempt has finished yielding!\"\n)",
            "title": "Try"
        },
        {
            "location": "/Libraries/Try/#try",
            "text": "An asynchronous pcall-wrapper library for controlling the flow of error-prone, interdependent functions.",
            "title": "Try"
        },
        {
            "location": "/Libraries/Try/#how-to-use",
            "text": "Upon requiring the Library, it returns a function called Try: -- Without RoStrap  local   Try   =   require ( TryLibrary )   -- With RoStrap  local   Resources   =   require ( ReplicatedStorage : WaitForChild ( \"Resources\" ))  local   Try   =   Resources : LoadLibrary ( \"Try\" )",
            "title": "How to use"
        },
        {
            "location": "/Libraries/Try/#api",
            "text": "Attempt Try(Function, ...)  Try  calls  pcall(Function, ...)   on a separate thread , and returns a table Object called an  Attempt .",
            "title": "API"
        },
        {
            "location": "/Libraries/Try/#attempt",
            "text": "Attempt :Then(Callback)  This method takes a callback of the form  <function, callable table> Callback(...) , and pcalls it  if the previous pcall didn't error , with  ...  being that which was returned by that  pcall . This also returns the attempt, for further chaining.  local   HttpService   =   game : GetService ( 'HttpService' )  Try ( wait ,   0.1 ) \n\n     -- Try hashing the time \n     : Then ( function   ( Delta ,   ElapsedTime ) \n         return   HttpService : GetAsync ( 'http://md5.jsontest.com/?text='   ..   Delta ) \n     end ) \n\n     -- Try decoding the response \n     : Then ( function   ( RawResponse ) \n         return   HttpService : JSONDecode ( RawResponse ) \n     end ) \n\n     -- Print the decoded response data \n     : Then ( function   ( Response ) \n         print ( 'Input:' ,   Response . original ,   ' \\n MD5:' ,   Response . md5 ) \n     end )   Attempt :Catch([string Patterns...], Callback)  This method takes a callback of the form  Variant Callback(string Error, string Stack, Attempt FailedAttempt) , and pcalls it  if the previous pcall had an error . Errors can be optionally filtered by providing a list of  patterns which the error should match , otherwise all errors are caught by the function. Once an attempt's error is caught, it will not be caught by the next chained  :Catch  method, unless  Callback  itself has an error. The attempt is then returned for chaining.  If the first returned value from the attempt is an  Attempt , it will be executed and the method will process its errors.  local   HttpService   =   game : GetService ( 'HttpService' )  Try ( HttpService . GetAsync ,   HttpService ,   'http://httpstat.us/404' ) \n     : Then ( function   ( Data ) \n         print ( 'Found' ,   Data ) \n     end ) \n\n     -- Catch when the URL doesn't exist \n     : Catch ( 'HTTP 404' ,   function   ( Error ,   Stack ,   Attempt ) \n         warn ( 'Not found, error:' ,   Error ) \n     end ) \n\n     -- Catch any other error \n     : Catch ( function   ( Error ,   Stack ,   Attempt ) \n         warn ( 'Unknown error:' ,   Error ) \n     end )   httpstat.us  is a good way to test Http request errors.  Attempt :Retry()  This method can only be called within a  Catch  callback. It retries the last function called in the chain before the error (with the same old arguments).  Attempt.RetryCount  is incremented each time the attempt is retried, and is reset after a  Retry   pcall  doesn't error.  You can use this method to retry a sequence of interdependent function calls that fail, and even limit the number of, or space out, retries. For example:  local   HttpService   =   game : GetService ( 'HttpService' )  Try ( HttpService . GetAsync ,   HttpService ,   'http://httpstat.us/503' ) \n     : Then ( function   ( Data ) \n         print ( 'Found' ,   Data ) \n     end ) \n\n     -- Catch when the server is having issues and retry \n     : Catch ( 'HTTP 503' ,   'Timeout was reached' ,   function   ( Error ,   Stack ,   Attempt ) \n\n         -- Limit the number of retries to 3 \n         if   Attempt . RetryCount   <   3   then \n\n             -- Space out each retry \n             local   BackoffTime   =   Attempt . RetryCount   *   3   +   3 \n             warn ( 'Retrying in' ,   BackoffTime ,   'seconds...' ) \n             wait ( BackoffTime ) \n\n             -- Retry the attempt \n             return   Attempt : Retry () \n\n         -- Give up if retry limit reached \n         else \n             warn ( 'Failed' ) \n         end \n\n     end ) \n\n     -- Catch any other errors \n     : Catch ( function   ( Error ,   Stack ,   Attempt ) \n         warn ( 'Unknown error:' ,   Error ) \n     end )   Attempt :Wait()  This method yields until all of the pcalls before it have finished running.  Try ( wait ,   0.5 ) \n     : Then ( wait ) \n     : Wait ()  print ( \"Hello!\" )   -- Runs after all of the threads finish   A  :Wait()  can go anywhere in the Chain:  local   Attempt   =   Try ( wait ,   2 )  print ( \"Hey!\" )   -- This runs immediately after Try is called on a separate thread  Attempt \n     : Wait ()   -- Wait until this Attempt's thread finishes yielding \n     : Then ( function (...)   -- This is still on a separate thread \n         wait ( 1 ) \n         print ( \"This was returned by wait(2)\" ,   ...) \n     end )  print ( \"The Attempt has finished yielding!\" )",
            "title": "Attempt"
        },
        {
            "location": "/Libraries/Utility/HTMLParser/",
            "text": "HTMLParser\n\u00b6\n\n\nDemo:\n\nlocal\n \nHttpService\n \n=\n \ngame\n:\nGetService\n(\n\"HttpService\"\n)\n\n\nlocal\n \nHTML\n \n=\n \nHTMLParser\n.\nnew\n(\nHttpService\n:\nGetAsync\n(\n\"https://github.com/\"\n))\n\n\n\nwhile\n \nHTML\n:\nNext\n().\nTag\n \ndo\n\n    \nprint\n(\nHTML\n.\nTag\n,\n \nHTML\n.\nData\n)\n\n\nend\n\n\n-- Once an HTMLParser reaches its end, `Tag` and `Data` become nil\n\n\n\n\n-- The object can be used again for round 2!\n\n\nwhile\n \nHTML\n:\nNext\n().\nTag\n \ndo\n\n    \nprint\n(\nHTML\n.\nTag\n,\n \nHTML\n.\nData\n)\n\n\nend\n\n\n\n\nAPI\n\u00b6\n\n\nInstantiation:\n\nlocal\n \nHTML\n \n=\n \nHTMLParser\n.\nnew\n(\nHTML_DOCUMENT_STRING\n)\n\n\n\nAdvancement:\n\nHTML\n:\nNext\n()\n\n\nHTML\n:\nNext\n():\nNext\n():\nNext\n()\n\n\n\nAccessing data at the current state:\n\nprint\n(\nHTML\n.\nTag\n)\n \n-- /html (no <>)\n\n\nprint\n(\nHTML\n.\nData\n)\n \n-- This value is anything that occurs after HTML.Tag but before the next Tag",
            "title": "HTMLParser"
        },
        {
            "location": "/Libraries/Utility/HTMLParser/#htmlparser",
            "text": "Demo: local   HttpService   =   game : GetService ( \"HttpService\" )  local   HTML   =   HTMLParser . new ( HttpService : GetAsync ( \"https://github.com/\" ))  while   HTML : Next (). Tag   do \n     print ( HTML . Tag ,   HTML . Data )  end  -- Once an HTMLParser reaches its end, `Tag` and `Data` become nil  -- The object can be used again for round 2!  while   HTML : Next (). Tag   do \n     print ( HTML . Tag ,   HTML . Data )  end",
            "title": "HTMLParser"
        },
        {
            "location": "/Libraries/Utility/HTMLParser/#api",
            "text": "Instantiation: local   HTML   =   HTMLParser . new ( HTML_DOCUMENT_STRING )  \nAdvancement: HTML : Next ()  HTML : Next (): Next (): Next ()  \nAccessing data at the current state: print ( HTML . Tag )   -- /html (no <>)  print ( HTML . Data )   -- This value is anything that occurs after HTML.Tag but before the next Tag",
            "title": "API"
        },
        {
            "location": "/Libraries/Utility/SortedArray/",
            "text": "SortedArray\n\u00b6\n\n\nA class to create sorted arrays. Must contain objects comparable to one another (that can use the \n<\n and \n==\n operators). Numbers and strings support these operators by default.\n\nlocal\n \nReplicatedStorage\n \n=\n \ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n)\n\n\nlocal\n \nResources\n \n=\n \nrequire\n(\nReplicatedStorage\n:\nWaitForChild\n(\n\"Resources\"\n))\n\n\nlocal\n \nSortedArray\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"SortedArray\"\n)\n\n\n\nlocal\n \nArray\n \n=\n \nSortedArray\n.\nnew\n()\n\n\n\n-- Alternatively\n\n\nlocal\n \nSorted\n \n=\n \nSortedArray\n.\nnew\n{\n2\n,\n \n1\n,\n \n5\n,\n \n3\n}\n \n-- Will get `table.sort`ed\n\n\n\n\nAPI\n\u00b6\n\n\nSortedArray.new([array InitialSet], [function SortFunction])\n\u00b6\n\n\nInstantiates and returns a new SortedArray, with optional parameters.\n- \nInitialSet\n: Pass in an array of data which will be sorted upon instantiation. If this is omitted, an empty array is used.\n- \nSortFunction\n: An optional comparison function which is used to customize the element sorting, which will be given two elements \na\n and \nb\n from the array as parameters. The function should return a boolean value specifying whether the first argument should be before the second argument in the sequence. If no comparison function is passed, the Lua-default \na < b\n sorting is used.\n\n\nSortedArray:Insert()\n\u00b6\n\n\nInserts an element in the proper place which would preserve the array's orderedness.\n\nlocal\n \nSorted\n \n=\n \nSortedArray\n.\nnew\n{\n1\n,\n \n2\n,\n \n3\n,\n \n5\n}\n\n\nSorted\n:\nInsert\n(\n4\n)\n\n\nprint\n(\n\"{\"\n \n..\n \nSorted\n:\nConcat\n(\n\", \"\n)\n \n..\n \n\"}\"\n)\n\n\n-- {1, 2, 3, 4, 5}\n\n\n\n\nSortedArray:Remove()\n\u00b6\n\n\nIf the parameter passed to \nRemove\n is an array, it will remove all values within the array from the \nSortedArray\n\n\nlocal\n \nSorted\n \n=\n \nSortedArray\n.\nnew\n{\n1\n,\n \n2\n,\n \n3\n,\n \n5\n}\n\n\nSorted\n:\nRemove\n{\n1\n,\n \n2\n,\n \n3\n}\n\n\nprint\n(\n\"{\"\n \n..\n \nSorted\n:\nConcat\n(\n\", \"\n)\n \n..\n \n\"}\"\n)\n\n\n-- {5}\n\n\n\n\nIf the parameter is not of \ntype(table)\n then it will fall back on table.remove\n\n\nSortedArray:Transform(a2 [, f1, f2])\n\u00b6\n\n\nDoes the operations necessary to transform SortedArray into the \na2\n, a second array. \nf1\n is an optional callback which fires for each addition operation necessary and \nf2\n for each removal. \nf1\n and \nf2\n will be called with \n(number IndexWhereOperationTakesPlace, ValueWhichIsBeingRemovedOrAdded)\n\n\nlocal\n \nArray\n \n=\n \nSortedArray\n.\nnew\n{\n\"Chromenium\"\n,\n \n\"GigsD4X\"\n,\n \n\"Validark\"\n}\n\n\n\nlocal\n \nfunction\n \nf1\n(\ni\n,\n \nv\n)\n\n    \nprint\n(\n\"f1(\"\n \n..\n \ni\n \n..\n \n\", \"\n \n..\n \nv\n \n..\n \n\")\"\n)\n\n\nend\n\n\n\nlocal\n \nfunction\n \nf2\n(\ni\n,\n \nv\n)\n\n    \nprint\n(\n\"f2(\"\n \n..\n \ni\n \n..\n \n\", \"\n \n..\n \nv\n \n..\n \n\")\"\n)\n\n\nend\n\n\n\nArray\n:\nTransform\n(\nSortedArray\n.\nnew\n{\n\"Chromenium\"\n,\n \n\"Evaera\"\n,\n \n\"Validark\"\n},\n \nf1\n,\n \nf2\n)\n\n\n\n-- The first parameter MUST be sorted, but it doesn't need to have the `SortedArray` metatable\n\n\n-- This also works:\n\n\n-- Array:Transform({\"Chromenium\", \"Evaera\", \"Validark\"}, f1, f2)\n\n\n\n--[[\n\n\nOutput:\n\n\n    f1(2, Evaera)\n\n\n    f2(3, GigsD4X)\n\n\n\nf1 indicates that \"Evaera\" must be inserted at index 2: table.insert(Array, 2, \"Evaera\")\n\n\nf2 indicates that the 3rd element of Array (\"GigsD4X\") must be removed (AFTER the previous operation shifted the array forward): table.remove(Array, 3)\n\n\n--]]\n\n\n\n\nSortedArray:Copy()\n\u00b6\n\n\nShallow copy. Pretty straightforward.\n\n\nOther SortedArray methods\n\u00b6\n\n\nYou can directly index functions from its index table, like \nConcat\n, \nNext\n, and \nForEach\n. \nView the full list in the source.\n\n\nSimply for convenience. It's also faster to do an \n__index\n lookup than a global lookup, so there's that too.\n\n\nSortedArray\n.\nnew\n{\n\"Chromenium\"\n,\n \n\"GigsD4X\"\n,\n \n\"Validark\"\n}:\nForEach\n(\nprint\n)\n\n\n\n--[[\n\n\n    1 Chromenium\n\n\n    2 GigsD4X\n\n\n    3 Validark\n\n\n--]]",
            "title": "SortedArray"
        },
        {
            "location": "/Libraries/Utility/SortedArray/#sortedarray",
            "text": "A class to create sorted arrays. Must contain objects comparable to one another (that can use the  <  and  ==  operators). Numbers and strings support these operators by default. local   ReplicatedStorage   =   game : GetService ( \"ReplicatedStorage\" )  local   Resources   =   require ( ReplicatedStorage : WaitForChild ( \"Resources\" ))  local   SortedArray   =   Resources : LoadLibrary ( \"SortedArray\" )  local   Array   =   SortedArray . new ()  -- Alternatively  local   Sorted   =   SortedArray . new { 2 ,   1 ,   5 ,   3 }   -- Will get `table.sort`ed",
            "title": "SortedArray"
        },
        {
            "location": "/Libraries/Utility/SortedArray/#api",
            "text": "",
            "title": "API"
        },
        {
            "location": "/Libraries/Utility/SortedArray/#sortedarraynewarray-initialset-function-sortfunction",
            "text": "Instantiates and returns a new SortedArray, with optional parameters.\n-  InitialSet : Pass in an array of data which will be sorted upon instantiation. If this is omitted, an empty array is used.\n-  SortFunction : An optional comparison function which is used to customize the element sorting, which will be given two elements  a  and  b  from the array as parameters. The function should return a boolean value specifying whether the first argument should be before the second argument in the sequence. If no comparison function is passed, the Lua-default  a < b  sorting is used.",
            "title": "SortedArray.new([array InitialSet], [function SortFunction])"
        },
        {
            "location": "/Libraries/Utility/SortedArray/#sortedarrayinsert",
            "text": "Inserts an element in the proper place which would preserve the array's orderedness. local   Sorted   =   SortedArray . new { 1 ,   2 ,   3 ,   5 }  Sorted : Insert ( 4 )  print ( \"{\"   ..   Sorted : Concat ( \", \" )   ..   \"}\" )  -- {1, 2, 3, 4, 5}",
            "title": "SortedArray:Insert()"
        },
        {
            "location": "/Libraries/Utility/SortedArray/#sortedarrayremove",
            "text": "If the parameter passed to  Remove  is an array, it will remove all values within the array from the  SortedArray  local   Sorted   =   SortedArray . new { 1 ,   2 ,   3 ,   5 }  Sorted : Remove { 1 ,   2 ,   3 }  print ( \"{\"   ..   Sorted : Concat ( \", \" )   ..   \"}\" )  -- {5}   If the parameter is not of  type(table)  then it will fall back on table.remove",
            "title": "SortedArray:Remove()"
        },
        {
            "location": "/Libraries/Utility/SortedArray/#sortedarraytransforma2-f1-f2",
            "text": "Does the operations necessary to transform SortedArray into the  a2 , a second array.  f1  is an optional callback which fires for each addition operation necessary and  f2  for each removal.  f1  and  f2  will be called with  (number IndexWhereOperationTakesPlace, ValueWhichIsBeingRemovedOrAdded)  local   Array   =   SortedArray . new { \"Chromenium\" ,   \"GigsD4X\" ,   \"Validark\" }  local   function   f1 ( i ,   v ) \n     print ( \"f1(\"   ..   i   ..   \", \"   ..   v   ..   \")\" )  end  local   function   f2 ( i ,   v ) \n     print ( \"f2(\"   ..   i   ..   \", \"   ..   v   ..   \")\" )  end  Array : Transform ( SortedArray . new { \"Chromenium\" ,   \"Evaera\" ,   \"Validark\" },   f1 ,   f2 )  -- The first parameter MUST be sorted, but it doesn't need to have the `SortedArray` metatable  -- This also works:  -- Array:Transform({\"Chromenium\", \"Evaera\", \"Validark\"}, f1, f2)  --[[  Output:      f1(2, Evaera)      f2(3, GigsD4X)  f1 indicates that \"Evaera\" must be inserted at index 2: table.insert(Array, 2, \"Evaera\")  f2 indicates that the 3rd element of Array (\"GigsD4X\") must be removed (AFTER the previous operation shifted the array forward): table.remove(Array, 3)  --]]",
            "title": "SortedArray:Transform(a2 [, f1, f2])"
        },
        {
            "location": "/Libraries/Utility/SortedArray/#sortedarraycopy",
            "text": "Shallow copy. Pretty straightforward.",
            "title": "SortedArray:Copy()"
        },
        {
            "location": "/Libraries/Utility/SortedArray/#other-sortedarray-methods",
            "text": "You can directly index functions from its index table, like  Concat ,  Next , and  ForEach .  View the full list in the source.  Simply for convenience. It's also faster to do an  __index  lookup than a global lookup, so there's that too.  SortedArray . new { \"Chromenium\" ,   \"GigsD4X\" ,   \"Validark\" }: ForEach ( print )  --[[      1 Chromenium      2 GigsD4X      3 Validark  --]]",
            "title": "Other SortedArray methods"
        },
        {
            "location": "/Libraries/Utility/Table/",
            "text": "Table\n\u00b6\n\n\nAPI\n\u00b6\n\n\nTable.Move\n\u00b6\n\n\nfunction\n \nTable\n.\nMove\n(\na1\n,\n \nf\n,\n \ne\n,\n \nt\n,\n \na2\n)\n\n    \n-- Moves elements [f, e] from array a1 into a2 starting at index t\n\n    \n-- Equivalent to Lua 5.3's table.move\n\n    \n-- @param table a1 from which to draw elements from range\n\n    \n-- @param number f starting index for range\n\n    \n-- @param number e ending index for range\n\n    \n-- @param number t starting index to move elements from a1 within [f, e]\n\n    \n-- @param table a2 the second table to move these elements to\n\n    \n--  @default a2 = a1\n\n    \n-- @returns a2\n\n\n\n\n-- Example Code\n\n\nlocal\n \nReplicatedStorage\n \n=\n \ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n)\n\n\nlocal\n \nResources\n \n=\n \nrequire\n(\nReplicatedStorage\n:\nWaitForChild\n(\n\"Resources\"\n))\n\n\nlocal\n \nTable\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Table\"\n)\n\n\nlocal\n \nDebug\n \n=\n \nResources\n:\nLoadLibrary\n(\n\"Debug\"\n)\n\n\n\nprint\n(\nDebug\n.\nTableToString\n(\nTable\n.\nMove\n({\n1\n,\n \n2\n,\n \n3\n},\n \n1\n,\n \n3\n,\n \n2\n)))\n\n\n-- {1, 1, 2, 3}\n\n\n\n-- Explanation:\n\n\n-- Inserts {1, 2, 3} @ 2\n\n\n\n\nTable.Lock\n\u00b6\n\n\nReturns a userdata with read-only access to a table.",
            "title": "Table"
        },
        {
            "location": "/Libraries/Utility/Table/#table",
            "text": "",
            "title": "Table"
        },
        {
            "location": "/Libraries/Utility/Table/#api",
            "text": "",
            "title": "API"
        },
        {
            "location": "/Libraries/Utility/Table/#tablemove",
            "text": "function   Table . Move ( a1 ,   f ,   e ,   t ,   a2 ) \n     -- Moves elements [f, e] from array a1 into a2 starting at index t \n     -- Equivalent to Lua 5.3's table.move \n     -- @param table a1 from which to draw elements from range \n     -- @param number f starting index for range \n     -- @param number e ending index for range \n     -- @param number t starting index to move elements from a1 within [f, e] \n     -- @param table a2 the second table to move these elements to \n     --  @default a2 = a1 \n     -- @returns a2   -- Example Code  local   ReplicatedStorage   =   game : GetService ( \"ReplicatedStorage\" )  local   Resources   =   require ( ReplicatedStorage : WaitForChild ( \"Resources\" ))  local   Table   =   Resources : LoadLibrary ( \"Table\" )  local   Debug   =   Resources : LoadLibrary ( \"Debug\" )  print ( Debug . TableToString ( Table . Move ({ 1 ,   2 ,   3 },   1 ,   3 ,   2 )))  -- {1, 1, 2, 3}  -- Explanation:  -- Inserts {1, 2, 3} @ 2",
            "title": "Table.Move"
        },
        {
            "location": "/Libraries/Utility/Table/#tablelock",
            "text": "Returns a userdata with read-only access to a table.",
            "title": "Table.Lock"
        },
        {
            "location": "/Contributing/",
            "text": "Contributing\n\u00b6\n\n\nIf you wish to contribute a Library, simply submit a pull request to \nLibraries.lua\n. Simply insert a new table with fields \nURL\n (you can leave off \nhttps://github.com\n) and an optional \nDescription\n and you are good to go!\n\n\nLibrary Standards\n\u00b6\n\n\nLibraries contributed to RoStrap must be useful, reusable, and reasonably universal. The code must be stable, maintained, readable, and speedy. It must have a readme or documentation website that clearly outlines its use and includes functioning demo code. Images help.\n\n\nSubmitted Libraries may be subject to code review.\n\n\nPlugin\n\u00b6\n\n\nThe following documentation outlines how the plugin works its magic.\n\n\nLibrary Discrimination\n\u00b6\n\n\nWhen the RoStrap plugin sees your \nURL\n within \nLibraries.lua\n, it will figure out how many Libraries exist within the directory located at the \nURL\n (which can be a link to a single file). If Lua files are descendants of another Lua file, they will be considered a single Library. Find the definition of a Library \nhere\n.\n\n\nTo indicate to the plugin's installer that a Lua file is a descendant of another, simply make a folder with the name of the parent Lua file, and place the parent Lua file inside with the name \"init\" (or \"main\" or \"_\"). Here is \nan example of a single Library that has ModuleScripts within it.\n\n\nFolders containing multiple Lua files with names containing the name of a ancestor folder will also be considered a single installable-package by the plugin. Examples of this to come.\n\n\nLibraries that should be installed and packaged differently from all of the already-integrated Libraries may require adjustment on the Plugin's part. In this case, do what makes the most sense for your GitHub repository or consider adding fields to the \nLibraries table\n and the installer will be adjusted.\n\n\nDependencies\n\u00b6\n\n\nDependencies are detected by the plugin using \nthis handy script\n. It can detect from the following source code that \nTween\n and \nMaid\n are the names a Library will need to have installed in order to work. If your source code intends to rely on dependencies from the RoStrap system, \nthe detection script\n \nmust\n be able to successfully determine the dependencies of your Libraries.\n\n\nlocal\n \nReplicatedStorage\n \n=\n \ngame\n:\nGetService\n(\n\"ReplicatedStorage\"\n)\n \n-- You have to use game:GetService\n\n\nlocal\n \nResources\n \n=\n \nrequire\n(\nReplicatedStorage\n:\nWaitForChild\n(\n\"Resources\"\n))\n \n-- You have to use WaitForChild\n\n\nlocal\n \nrequire\n \n=\n \nResources\n.\nLoadLibrary\n \n-- You can localize LoadLibrary\n\n\n\nlocal\n \nTween\n \n=\n \nrequire\n(\n\"Tween\"\n)\n \n-- Either of these work\n\n\nlocal\n \nMaid\n \n=\n \nResources\n:\nLoadLibrary\n(\n'Maid'\n)",
            "title": "Information"
        },
        {
            "location": "/Contributing/#contributing",
            "text": "If you wish to contribute a Library, simply submit a pull request to  Libraries.lua . Simply insert a new table with fields  URL  (you can leave off  https://github.com ) and an optional  Description  and you are good to go!",
            "title": "Contributing"
        },
        {
            "location": "/Contributing/#library-standards",
            "text": "Libraries contributed to RoStrap must be useful, reusable, and reasonably universal. The code must be stable, maintained, readable, and speedy. It must have a readme or documentation website that clearly outlines its use and includes functioning demo code. Images help.  Submitted Libraries may be subject to code review.",
            "title": "Library Standards"
        },
        {
            "location": "/Contributing/#plugin",
            "text": "The following documentation outlines how the plugin works its magic.",
            "title": "Plugin"
        },
        {
            "location": "/Contributing/#library-discrimination",
            "text": "When the RoStrap plugin sees your  URL  within  Libraries.lua , it will figure out how many Libraries exist within the directory located at the  URL  (which can be a link to a single file). If Lua files are descendants of another Lua file, they will be considered a single Library. Find the definition of a Library  here .  To indicate to the plugin's installer that a Lua file is a descendant of another, simply make a folder with the name of the parent Lua file, and place the parent Lua file inside with the name \"init\" (or \"main\" or \"_\"). Here is  an example of a single Library that has ModuleScripts within it.  Folders containing multiple Lua files with names containing the name of a ancestor folder will also be considered a single installable-package by the plugin. Examples of this to come.  Libraries that should be installed and packaged differently from all of the already-integrated Libraries may require adjustment on the Plugin's part. In this case, do what makes the most sense for your GitHub repository or consider adding fields to the  Libraries table  and the installer will be adjusted.",
            "title": "Library Discrimination"
        },
        {
            "location": "/Contributing/#dependencies",
            "text": "Dependencies are detected by the plugin using  this handy script . It can detect from the following source code that  Tween  and  Maid  are the names a Library will need to have installed in order to work. If your source code intends to rely on dependencies from the RoStrap system,  the detection script   must  be able to successfully determine the dependencies of your Libraries.  local   ReplicatedStorage   =   game : GetService ( \"ReplicatedStorage\" )   -- You have to use game:GetService  local   Resources   =   require ( ReplicatedStorage : WaitForChild ( \"Resources\" ))   -- You have to use WaitForChild  local   require   =   Resources . LoadLibrary   -- You can localize LoadLibrary  local   Tween   =   require ( \"Tween\" )   -- Either of these work  local   Maid   =   Resources : LoadLibrary ( 'Maid' )",
            "title": "Dependencies"
        }
    ]
}